{"ast":null,"code":"import { all, put, call, takeLatest, fork, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:3306/api/user';\n\nfunction loginAPI(loginData) {\n  return axios.post('/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    console.log('result: ', result);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction signupAPI(signUpData) {\n  return axios.post('/', signUpData);\n}\n\nfunction* signup(action) {\n  try {\n    yield call(signupAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nfunction logoutAPI() {\n  return axios.post('/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction loadUserAPI() {\n  return axios.get('/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/user.js"],"names":["all","put","call","takeLatest","fork","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","defaults","baseURL","loginAPI","loginData","post","withCredentials","login","action","result","data","console","log","type","err","error","watchLogin","signupAPI","signUpData","signup","watchSignup","logoutAPI","logout","watchLogout","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import { all, put, call, takeLatest, fork, delay } from 'redux-saga/effects';\nimport axios from 'axios'\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n        SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, \n        LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n        LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\n\naxios.defaults.baseURL = 'http://localhost:3306/api/user';\n\nfunction loginAPI(loginData) {\n    return axios.post('/login', loginData, {\n        withCredentials: true,\n    });\n}\n\nfunction* login(action){\n    try{\n        const result = yield call(loginAPI, action.data);\n        console.log('result: ', result);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: LOG_IN_FAILURE,\n        })\n    }\n}\n\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN_REQUEST, login)\n    \n}\n\nfunction signupAPI(signUpData){\n    return axios.post('/', signUpData);\n}\n\nfunction* signup(action){\n    try{\n        yield call(signupAPI, action.data);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: err,\n        })\n    }\n   \n}\n\nfunction* watchSignup(){\n    yield takeLatest(SIGN_UP_REQUEST, signup)\n}\n\nfunction logoutAPI() {\n    return axios.post('/logout', {}, {\n        withCredentials: true,\n    })\n}\n\nfunction* logout(){\n    try{\n        yield call(logoutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOG_OUT_REQUEST, logout)\n}\n\nfunction loadUserAPI(){\n    return axios.get('/', {\n        withCredentials: true,\n    })\n}\n\nfunction* loadUser(){\n    try{\n        const result = yield call(loadUserAPI);\n        yield put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLoadUser(){\n    yield takeLatest(LOAD_USER_REQUEST, loadUser)\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchSignup),\n        fork(watchLoadUser),\n    ])\n}"]},"metadata":{},"sourceType":"module"}