{"ast":null,"code":"import { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log('addPostResult: ', result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: action.error\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        comments: result.data,\n        postid: action.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction loadMainPostAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPost() {\n  try {\n    const result = yield call(loadMainPostAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLoadMainPost() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPost);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e), yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadMainPost), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/post.js"],"names":["all","fork","call","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","addPostAPI","postData","post","withCredentials","addPost","action","result","data","console","log","type","err","error","watchAddPost","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","get","loadComments","comments","postid","e","watchLoadComments","loadMainPostAPI","loadMainPost","watchLoadMainPost","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACQC,mBADR,EAC6BC,mBAD7B,EACkDC,mBADlD,EAEQC,uBAFR,EAEiCC,uBAFjC,EAE0DC,uBAF1D,EAGQC,0BAHR,EAGoCC,0BAHpC,EAGgEC,0BAHhE,EAIQC,uBAJR,EAIiCC,uBAJjC,EAI0DC,uBAJ1D,EAKQC,qBALR,EAK+BC,qBAL/B,EAKsDC,qBALtD,QAKmF,kBALnF;;AAOA,SAASC,UAAT,CAAoBC,QAApB,EAA6B;AACzB,SAAOpB,KAAK,CAACqB,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACjCE,IAAAA,eAAe,EAAE;AADgB,GAA9B,CAAP;AAGH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM7B,IAAI,CAACuB,UAAD,EAAaK,MAAM,CAACE,IAApB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,MAA/B;AACA,UAAM3B,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAE3B,gBADA;AAENwB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMI,GAAN,EAAU;AACPH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMhC,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAE1B,gBADA;AAEN4B,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUE,YAAV,GAAwB;AACpB,QAAMnC,UAAU,CAACI,gBAAD,EAAmBsB,OAAnB,CAAhB;AACH;;AAED,SAASU,aAAT,CAAuBP,IAAvB,EAA4B;AACxB,SAAO1B,KAAK,CAACqB,IAAN,CAAY,QAAOK,IAAI,CAACQ,MAAO,UAA/B,EAA0C;AAAEC,IAAAA,OAAO,EAAET,IAAI,CAACS;AAAhB,GAA1C,EAAqE;AACxEb,IAAAA,eAAe,EAAE;AADuD,GAArE,CAAP;AAGH;;AAED,UAAUc,UAAV,CAAqBZ,MAArB,EAA4B;AACxB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM7B,IAAI,CAACqC,aAAD,EAAgBT,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAM5B,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAExB,mBADA;AAENqB,MAAAA,IAAI,EAAE;AACFQ,QAAAA,MAAM,EAAEV,MAAM,CAACE,IAAP,CAAYQ,MADlB;AAEFG,QAAAA,OAAO,EAAEZ,MAAM,CAACC;AAFd;AAFA,KAAD,CAAT;AAOH,GATD,CASC,OAAMI,GAAN,EAAU;AACPH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMhC,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAEvB,mBADA;AAENyB,MAAAA,KAAK,EAAEP,MAAM,CAACO;AAFR,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,eAAV,GAA2B;AACvB,QAAMzC,UAAU,CAACO,mBAAD,EAAsBgC,UAAtB,CAAhB;AACH;;AAED,SAASG,eAAT,CAAyBL,MAAzB,EAAgC;AAC5B,SAAOlC,KAAK,CAACwC,GAAN,CAAW,SAAQN,MAAO,WAA1B,CAAP;AACH;;AAED,UAAUO,YAAV,CAAuBjB,MAAvB,EAA8B;AAC1B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM7B,IAAI,CAAC2C,eAAD,EAAkBf,MAAM,CAACE,IAAzB,CAAzB;AACA,UAAM5B,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAEZ,qBADA;AAENS,MAAAA,IAAI,EAAE;AACFgB,QAAAA,QAAQ,EAAEjB,MAAM,CAACC,IADf;AAEFiB,QAAAA,MAAM,EAAEnB,MAAM,CAACE;AAFb;AAFA,KAAD,CAAT;AAOH,GATD,CASC,OAAMkB,CAAN,EAAQ;AACLjB,IAAAA,OAAO,CAACI,KAAR,CAAca,CAAd;AACA,UAAM9C,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAEX,qBADA;AAENa,MAAAA,KAAK,EAAEa;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUC,iBAAV,GAA6B;AACzB,QAAMhD,UAAU,CAACmB,qBAAD,EAAwByB,YAAxB,CAAhB;AACH;;AAED,SAASK,eAAT,GAA0B;AACtB,SAAO9C,KAAK,CAACwC,GAAN,CAAU,QAAV,CAAP;AACH;;AAED,UAAUO,YAAV,GAAwB;AACpB,MAAG;AACC,UAAMtB,MAAM,GAAG,MAAM7B,IAAI,CAACkD,eAAD,CAAzB;AACA,UAAMhD,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAErB,uBADA;AAENkB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMI,GAAN,EAAU;AACPH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMhC,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAEpB,uBADA;AAENsB,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUkB,iBAAV,GAA6B;AACzB,QAAMnD,UAAU,CAACU,uBAAD,EAA0BwC,YAA1B,CAAhB;AACH;;AAED,SAASE,mBAAT,CAA6BC,GAA7B,EAAiC;AAC7B,SAAOlD,KAAK,CAACwC,GAAN,CAAW,YAAWU,GAAI,EAA1B,CAAP;AACH;;AAED,UAAUC,gBAAV,CAA2B3B,MAA3B,EAAkC;AAC9B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM7B,IAAI,CAACqD,mBAAD,EAAsBzB,MAAM,CAACE,IAA7B,CAAzB;AACA,UAAM5B,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAElB,0BADA;AAENe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMkB,CAAN,EAAQ;AACLjB,IAAAA,OAAO,CAACI,KAAR,CAAca,CAAd,GACA,MAAM9C,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAEjB,0BADA;AAENmB,MAAAA,KAAK,EAAEa;AAFD,KAAD,CADT;AAKH;AACJ;;AAED,UAAUQ,qBAAV,GAAiC;AAC7B,QAAMvD,UAAU,CAACa,0BAAD,EAA6ByC,gBAA7B,CAAhB;AACH;;AAED,SAASE,gBAAT,CAA0BC,EAA1B,EAA6B;AACzB,SAAOtD,KAAK,CAACwC,GAAN,CAAW,QAAOc,EAAG,QAArB,CAAP;AACH;;AAED,UAAUC,aAAV,CAAwB/B,MAAxB,EAA+B;AAC3B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM7B,IAAI,CAACyD,gBAAD,EAAmB7B,MAAM,CAACE,IAA1B,CAAzB;AACA,UAAM5B,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAEf,uBADA;AAENY,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMkB,CAAN,EAAQ;AACLjB,IAAAA,OAAO,CAACI,KAAR,CAAca,CAAd;AACA,UAAM9C,GAAG,CAAC;AACN+B,MAAAA,IAAI,EAAEd,uBADA;AAENgB,MAAAA,KAAK,EAAEa;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUY,kBAAV,GAA8B;AAC1B,QAAM3D,UAAU,CAACgB,uBAAD,EAA0B0C,aAA1B,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAM/D,GAAG,CAAC,CACNC,IAAI,CAACqC,YAAD,CADE,EAENrC,IAAI,CAAC2C,eAAD,CAFE,EAGN3C,IAAI,CAACkD,iBAAD,CAHE,EAINlD,IAAI,CAACqD,iBAAD,CAJE,EAKNrD,IAAI,CAACyD,qBAAD,CALE,EAMNzD,IAAI,CAAC6D,kBAAD,CANE,CAAD,CAAT;AAQH","sourcesContent":["import { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, \n        LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n        LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, \n        LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData){\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    })\n}\n\nfunction* addPost(action){\n    try{\n        const result = yield call(addPostAPI, action.data);\n        console.log('addPostResult: ', result)\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction addCommentAPI(data){\n    return axios.post(`post/${data.postId}/comment`, { content: data.content }, {\n        withCredentials: true,\n    })\n}\n\nfunction* addComment(action){\n    try{\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            }\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error,\n        })\n    }\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId){\n    return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action){\n    try{\n        const result = yield call(loadCommentsAPI, action.data);\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                comments: result.data,\n                postid: action.data,\n            }\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadComments(){\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\n}\n\nfunction loadMainPostAPI(){\n    return axios.get('/posts');\n}\n\nfunction* loadMainPost(){\n    try{\n        const result = yield call(loadMainPostAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLoadMainPost(){\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPost);\n}\n\nfunction loadHashtagPostsAPI(tag){\n    return axios.get(`/hashtag/${tag}`)\n}\n\nfunction* loadHashtagPosts(action){\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e),\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts(){\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\n}\n\nfunction loadUserPostsAPI(id){\n    return axios.get(`user/${id}/posts`)\n}\n\nfunction* loadUserPosts(action){\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts(){\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadComments),\n        fork(watchLoadMainPost),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n    ])\n}"]},"metadata":{},"sourceType":"module"}