{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport createSagamiddleware from 'redux-saga';\nimport axios from 'axios';\nimport rootReducer from '../reducers';\nimport AppLayout from '../components/appLayout';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst Nodebird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Nodebird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    charSet: \"UTF-8\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n  }), __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"/public/favicon.ico\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps))));\n};\n\nNodebird.getInitialProps = async context => {\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST // there is no user.me in the reducer state yet\n\n    }); // so after Component.getInitialProps work in component Profile,\n  } // no working in dispatch \n\n\n  if (Component.getInitialProps) {\n    pageProps = (await Component.getInitialProps(ctx)) || {};\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagamiddleware = createSagamiddleware();\n  const middlewares = [sagamiddleware];\n  const enhancer = true ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(rootReducer, initialState, enhancer);\n  store.sagaTask = sagamiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Nodebird));","map":null,"metadata":{},"sourceType":"module"}