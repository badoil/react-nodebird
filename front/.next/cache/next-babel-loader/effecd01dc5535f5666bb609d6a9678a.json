{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      isAddingComment = _useSelector2.isAddingComment,\n      commentAdded = _useSelector2.commentAdded;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  console.log('liked:', liked);\n  console.log('v.id:', post.Likers);\n  console.log('me.id:', me);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('you need to login');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, [commentFormOpened]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onLikeOrUnlike = useCallback(function () {\n    if (!me) {\n      alert('No Authentication');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onUnfollow = useCallback(function (postUserId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: postUserId\n      });\n    };\n  }, []);\n  var onFollow = useCallback(function (postUserId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: postUserId\n      });\n    };\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLikeOrUnlike\n    }), __jsx(EditOutlined, {\n      key: \"edit\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId ? __jsx(React.Fragment, null, __jsx(Button, null, \"update\"), __jsx(Button, null, \"remove\")) : __jsx(Button, null, \"send a complaint\"))\n    }, __jsx(EllipsisOutlined, {\n      key: \"ellipsis\"\n    }))],\n    title: post.Retweet && post.Retweet.User && post.Retweet.User.nickname && me && me.userId ? \"\".concat(me.userId, \" retweet \").concat(post.Retweet.User.nickname, \"'s post\") : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"Unfollow\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"Follow\")\n  }, post.RetweetId && post.Retweet && post.Retweet.User && post.Retweet.User.id ? __jsx(Card, {\n    cover: post.Retweet.Images && post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(\"form\", {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    row: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"jack\")), __jsx(List, {\n    header: \"comments: \".concat(post.comments ? post.comments.length : 0),\n    itemLayout: \"horizontal\",\n    dataSource: post.comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          as: \"/user/\".concat(item.User.id),\n          href: {\n            pathname: \"/user\",\n            query: {\n              id: item.User.id\n            }\n          }\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  card: PropTypes.shape({\n    User: PropTypes.object,\n    img: PropTypes.string,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/components/postCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Form","List","Input","Comment","Popover","PropTypes","useDispatch","useSelector","Link","EllipsisOutlined","EditOutlined","HeartOutlined","TwitterOutlined","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","UNFOLLOW_USER_REQUEST","FOLLOW_USER_REQUEST","PostImages","PostCardContent","PostCard","post","dispatch","state","user","me","isAddingComment","commentAdded","commentFormOpened","setCommentFormOpened","commentText","setCommentText","liked","Likers","find","v","id","console","log","onSubmitComment","e","preventDefault","alert","type","data","postId","content","onToggleComment","prev","onChangeCommentText","target","value","onLikeOrUnlike","onRetweet","onUnfollow","postUserId","onFollow","createdAt","Images","UserId","Retweet","User","nickname","userId","Followings","RetweetId","pathname","query","comments","length","item","propTypes","card","shape","object","img","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment, Popover  } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\n\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\n\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\n\n\nconst PostCard = ({ post } ) => {\n  const dispatch = useDispatch()\n  const { me } = useSelector(state => state.user);\n  const { isAddingComment, commentAdded } = useSelector(state => state.post);\n  const [ commentFormOpened, setCommentFormOpened ] = useState(false);\n  const [ commentText, setCommentText ] = useState('');\n  \n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id)\n  console.log('liked:', liked);\n  console.log('v.id:', post.Likers)\n  console.log('me.id:', me);\n  useEffect(() => {\n    setCommentText('');\n  }, [ commentAdded === true]);\n\n  const onSubmitComment = useCallback((e) => {\n    e.preventDefault();\n    if(!me){\n      return alert('you need to login');\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText,\n      }\n    })\n  }, [ me && me.id, commentText ])\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n    if(!commentFormOpened){\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      })\n    }\n\n  }, [commentFormOpened])\n\n  const onChangeCommentText = useCallback((e) => {\n    setCommentText(e.target.value);\n  }, [])\n\n  const onLikeOrUnlike = useCallback(() => {\n    if(!me){\n      alert('No Authentication');\n    }\n    if(liked){\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id,\n      })\n    }else{\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id,\n      })\n    }\n  },[me && me.id, post && post.id, liked])\n\n  const onRetweet = useCallback(() => {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    })\n  }, [me && me.id, post && post.id])\n\n  const onUnfollow = useCallback(postUserId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: postUserId,\n    })\n  }, [])\n\n  const onFollow = useCallback(postUserId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: postUserId,\n    })\n  }, [])\n\n    return(\n      <div>\n        <Card\n        key={+post.createdAt}\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <TwitterOutlined key='retweet' onClick={onRetweet} />,\n          <HeartOutlined key='heart' onClick={onLikeOrUnlike} />,\n          <EditOutlined key=\"edit\" onClick={onToggleComment} />,\n          <Popover\n            key='ellipsis'\n            content={( \n              <Button.Group>\n              {me && post.UserId\n              ?(<>\n                <Button>update</Button>\n                <Button>remove</Button>\n              </>)\n              :<Button>send a complaint</Button>}\n              </Button.Group>\n            )}\n          >\n             <EllipsisOutlined key=\"ellipsis\" />\n          </Popover>\n         ,\n        ]}\n        title={post.Retweet && post.Retweet.User && post.Retweet.User.nickname && me && me.userId? `${me.userId} retweet ${post.Retweet.User.nickname}'s post`: null}\n        extra={ !me || (post.User.id === me.id) \n          ? null\n          : me.Followings && me.Followings.find(v => v.id === post.User.id)\n            ? <Button onClick={onUnfollow(post.User.id)} >Unfollow</Button>\n            : <Button onClick={onFollow(post.User.id)} >Follow</Button>}\n        >\n          {\n            post.RetweetId && post.Retweet && post.Retweet.User && post.Retweet.User.id?\n            (<Card\n              cover={post.Retweet.Images && post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\n            >\n              <Card.Meta \n                avatar={<Link href={{ pathname: `/user`, query: {id: post.Retweet.User.id}}} as={`/user/${post.Retweet.User.id}`} >\n                         <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n                      </Link>}\n                title={post.Retweet.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />}\n              />\n            </Card>\n            ):(\n          <Card.Meta \n          avatar={<Link href={{ pathname: `/user`, query: {id: post.User.id}}} as={`/user/${post.User.id}`} >\n                   <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n          />) \n          }        \n        </Card>\n        \n        { commentFormOpened && \n          <>\n            <form onSubmit={onSubmitComment} >\n              <Form.Item>\n                <Input.TextArea row={4} value={commentText} onChange={onChangeCommentText} />\n              </Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment} >jack</Button>\n            </form>\n            <List \n              header={`comments: ${post.comments? post.comments.length: 0}`}\n              itemLayout=\"horizontal\"\n              dataSource={post.comments || []}\n              renderItem={item => (\n                <li>\n                  <Comment \n                  author={item.User.nickname}\n                  avatar={<Link as={`/user/${item.User.id}`} href={{ pathname: `/user`, query: {id: item.User.id}}} >\n                           <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                          </Link>}\n                  content={item.content}\n                  />\n                </li>\n              )}\n            \n            />\n          </>\n        }\n      </div>\n    )\n};\n\nPostCard.propTypes = {\n    card: PropTypes.shape({\n        User: PropTypes.object,\n        img: PropTypes.string,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}