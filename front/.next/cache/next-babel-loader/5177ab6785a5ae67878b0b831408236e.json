{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment, Popover } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    isAddingComment,\n    commentAdded\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('you need to login');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, [commentFormOpened]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  const onLikeOrUnlike = useCallback(() => {\n    if (!me) {\n      alert('No Authentication');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  const onUnfollow = useCallback(postUserId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: postUserId\n    });\n  }, []);\n  const onFollow = useCallback(postUserId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: postUserId\n    });\n  }, []);\n  const onRemovePost = useCallback(postId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: postId\n    });\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLikeOrUnlike\n    }), __jsx(EditOutlined, {\n      key: \"edit\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId ? __jsx(React.Fragment, null, __jsx(Button, null, \"update\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"remove\")) : __jsx(Button, null, \"send a complaint\"))\n    }, __jsx(EllipsisOutlined, {\n      key: \"ellipsis\"\n    }))],\n    title: post.Retweet && post.Retweet.User && post.Retweet.User.nickname && me && me.userId ? `${me.userId} retweet ${post.Retweet.User.nickname}'s post` : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(v => v.id === post.User.id) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"Unfollow\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"Follow\")\n  }, post.RetweetId && post.Retweet && post.Retweet.User && post.Retweet.User.id ? __jsx(Card, {\n    cover: post.Retweet.Images && post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(\"form\", {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    row: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"jack\")), __jsx(List, {\n    header: `comments: ${post.comments ? post.comments.length : 0}`,\n    itemLayout: \"horizontal\",\n    dataSource: post.comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        as: `/user/${item.User.id}`,\n        href: {\n          pathname: `/user`,\n          query: {\n            id: item.User.id\n          }\n        }\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}