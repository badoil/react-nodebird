{"ast":null,"code":"import { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(formData) {\n  return axios.post('/post', formData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log('addPostResult: ', result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI(data) {\n  console.log('addCommentAPI data:', data);\n  return axios.post(`post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    console.log('addCommentActionData: ', action.data);\n    const result = yield call(addCommentAPI, action.data);\n    console.log('addCommentResult:', result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (err) {\n    console.error('addcommentError', err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: action.error\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e), yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`user/${id || 0}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log('likePostUserId:', result.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    console.log('unlikePostUserId:', result.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    console.log('retweetResult: ', result);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    console.log('removeAction:', action.id);\n    const result = yield call(removePostAPI, action.data);\n    console.log('removePostResult: ', result.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadMainPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/post.js"],"names":["all","fork","call","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_SUCCESS","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","addPostAPI","formData","post","withCredentials","addPost","action","result","data","console","log","type","id","err","error","watchAddPost","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","get","loadComments","comments","e","watchLoadComments","loadMainPostsAPI","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","uploadImagesAPI","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","removePostAPI","removePost","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, \n        LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n        LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, \n        LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, \n        UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, \n        LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, \n        UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, \n        RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, \n        REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(formData){\n    return axios.post('/post', formData, {\n        withCredentials: true,\n    })\n}\n\nfunction* addPost(action){\n    try{\n        const result = yield call(addPostAPI, action.data);\n        console.log('addPostResult: ', result)\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction addCommentAPI(data){\n    console.log('addCommentAPI data:', data)\n    return axios.post(`post/${data.postId}/comment`, { content: data.content }, {\n        withCredentials: true,\n    })\n}\n\nfunction* addComment(action){\n    try{\n        console.log('addCommentActionData: ', action.data)\n        const result = yield call(addCommentAPI, action.data);\n        console.log('addCommentResult:', result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            }\n        })\n    }catch(err){\n        console.error('addcommentError', err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error,\n        })\n    }\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId){\n    return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n    try {\n      const result = yield call(loadCommentsAPI, action.data);\n      yield put({\n        type: LOAD_COMMENTS_SUCCESS,\n        data: {\n          postId: action.data,\n          comments: result.data,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      yield put({\n        type: LOAD_COMMENTS_FAILURE,\n        error: e,\n      });\n    }\n  }\n\nfunction* watchLoadComments(){\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\n}\n\nfunction loadMainPostsAPI(){\n    return axios.get('/posts');\n}\n\nfunction* loadMainPosts(){\n    try{\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts(){\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag){\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}`)\n}\n\nfunction* loadHashtagPosts(action){\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e),\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts(){\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\n}\n\nfunction loadUserPostsAPI(id){\n    return axios.get(`user/${id || 0}/posts`)\n}\n\nfunction* loadUserPosts(action){\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts(){\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction uploadImagesAPI(formData){\n    return axios.post('/post/images', formData, {\n        withCredentials: true,\n    })\n}\n\nfunction* uploadImages(action){\n    try{\n        const result = yield call(uploadImagesAPI, action.data)\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUploadImages(){\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId){\n    return axios.post(`post/${postId}/like`, {}, {\n        withCredentials: true,\n    })\n}\n\nfunction* likePost(action){\n    try{\n        const result = yield call(likePostAPI, action.data);\n        console.log('likePostUserId:', result.data)\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data:{\n                postId: action.data,\n                userId: result.data,\n            }\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLikePost(){\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId){\n    return axios.delete(`/post/${postId}/like`, {\n        withCredentials: true,\n    })\n}\n\nfunction* unlikePost(action){\n    try{\n        const result = yield call(unlikePostAPI, action.data);\n        console.log('unlikePostUserId:', result.data)\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data,\n            }\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUnlikePost(){\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId){\n    return axios.post(`/post/${postId}/retweet`, {}, {\n        withCredentials: true,\n    })\n}\n\nfunction* retweet(action){\n    try{\n        const result = yield call(retweetAPI, action.data);\n        console.log('retweetResult: ', result)\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: e,\n        })\n        alert(e.response.data);\n    }\n}\n\nfunction* watchRetweet(){\n    yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId){\n    return axios.delete(`/post/${postId}`, {\n        withCredentials: true,\n    })\n}\n\nfunction* removePost(action){\n    try{\n        console.log('removeAction:', action.id);\n        const result = yield call(removePostAPI, action.data);\n        console.log('removePostResult: ', result.data);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchRemovePost(){\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadComments),\n        fork(watchLoadMainPosts),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchRetweet),\n        fork(watchRemovePost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}