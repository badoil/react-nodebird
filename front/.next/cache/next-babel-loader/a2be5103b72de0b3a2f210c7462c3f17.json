{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    user: {\n      id: 1,\n      nickname: 'zero'\n    },\n    content: 'cho',\n    img: '',\n    comments: []\n  }],\n  imagePaths: [],\n  isAddingPost: false,\n  addPostErrorReason: false,\n  postAdded: false,\n  isAddingComment: false,\n  addCommentErrorReason: false,\n  commentAdded: false\n};\nvar dummyPost = {\n  user: {\n    id: 1,\n    nickname: 'oiry'\n  },\n  content: 'this is dummy',\n  comments: []\n};\nvar dummyComments = {\n  user: {\n    nickname: 2,\n    id: 1\n  },\n  content: 'this is dummy comment',\n  createdAt: new Date()\n};\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport var LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport var LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nvar PostReducer = function PostReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread({}, state, {\n        isAddingPost: true,\n        postAdded: false,\n        addPostErrorReason: ''\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread({}, state, {\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        isAddingPost: false,\n        postAdded: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread({}, state, {\n        isAddingPost: false,\n        addPostErrorReason: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread({}, state, {\n        isAddingComment: true,\n        commentAdded: false,\n        addCommentErrorReason: ''\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      var postIndex = state.mainPosts.findIndex(function (v) {\n        return v.id === action.data.postId;\n      });\n      var post = state.mainPosts[postIndex];\n      var comments = [].concat(_toConsumableArray(post.comments), [action.data.comments]);\n\n      var mainPosts = _toConsumableArray(state.mainPosts);\n\n      mainPosts[postIndex] = _objectSpread({}, post, {\n        comments: comments\n      });\n      return _objectSpread({}, state, {\n        mainPosts: mainPosts,\n        isAddingComment: false,\n        CommentAdded: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread({}, state, {\n        isAddingComment: false,\n        addCommentErrorReason: action.error\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default PostReducer;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","user","id","nickname","content","img","comments","imagePaths","isAddingPost","addPostErrorReason","postAdded","isAddingComment","addCommentErrorReason","commentAdded","dummyPost","dummyComments","createdAt","Date","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","PostReducer","state","action","type","error","postIndex","findIndex","v","data","postId","post","CommentAdded"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACRC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAE,CADF;AAEFC,MAAAA,QAAQ,EAAE;AAFR,KADE;AAKRC,IAAAA,OAAO,EAAE,KALD;AAMRC,IAAAA,GAAG,EAAE,EANG;AAORC,IAAAA,QAAQ,EAAE;AAPF,GAAD,CADa;AAUxBC,EAAAA,UAAU,EAAE,EAVY;AAWxBC,EAAAA,YAAY,EAAE,KAXU;AAYxBC,EAAAA,kBAAkB,EAAE,KAZI;AAaxBC,EAAAA,SAAS,EAAE,KAba;AAcxBC,EAAAA,eAAe,EAAE,KAdO;AAexBC,EAAAA,qBAAqB,EAAE,KAfC;AAgBxBC,EAAAA,YAAY,EAAE;AAhBU,CAArB;AAmBP,IAAMC,SAAS,GAAG;AACdb,EAAAA,IAAI,EAAE;AACFC,IAAAA,EAAE,EAAE,CADF;AAEFC,IAAAA,QAAQ,EAAC;AAFP,GADQ;AAKdC,EAAAA,OAAO,EAAE,eALK;AAMdE,EAAAA,QAAQ,EAAE;AANI,CAAlB;AASA,IAAMS,aAAa,GAAG;AAClBd,EAAAA,IAAI,EAAE;AACFE,IAAAA,QAAQ,EAAE,CADR;AAEFD,IAAAA,EAAE,EAAE;AAFF,GADY;AAKlBE,EAAAA,OAAO,EAAE,uBALS;AAMlBY,EAAAA,SAAS,EAAE,IAAIC,IAAJ;AANO,CAAtB;AASA,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,IAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,IAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,IAAMC,0BAA0B,GAAG,4BAAnC;AAEP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,IAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;;AAGP,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAgC;AAAA,MAA/BC,KAA+B,uEAAzBtD,YAAyB;AAAA,MAAXuD,MAAW;;AAChD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKxB,gBAAL;AACI,+BACOsB,KADP;AAEI7C,QAAAA,YAAY,EAAE,IAFlB;AAGIE,QAAAA,SAAS,EAAE,KAHf;AAIID,QAAAA,kBAAkB,EAAE;AAJxB;;AAMJ,SAAKuB,gBAAL;AACI,+BACOqB,KADP;AAEIrD,QAAAA,SAAS,GAAGc,SAAH,4BAAiBuC,KAAK,CAACrD,SAAvB,EAFb;AAGIQ,QAAAA,YAAY,EAAE,KAHlB;AAIIE,QAAAA,SAAS,EAAE;AAJf;;AAMJ,SAAKuB,gBAAL;AACI,+BACOoB,KADP;AAEI7C,QAAAA,YAAY,EAAE,KAFlB;AAGIC,QAAAA,kBAAkB,EAAE6C,MAAM,CAACE;AAH/B;;AAKJ,SAAKhB,mBAAL;AACI,+BACOa,KADP;AAEI1C,QAAAA,eAAe,EAAE,IAFrB;AAGIE,QAAAA,YAAY,EAAE,KAHlB;AAIID,QAAAA,qBAAqB,EAAE;AAJ3B;;AAMJ,SAAK6B,mBAAL;AACI,UAAMgB,SAAS,GAAGJ,KAAK,CAACrD,SAAN,CAAgB0D,SAAhB,CAA0B,UAAAC,CAAC;AAAA,eAAEA,CAAC,CAACzD,EAAF,KAASoD,MAAM,CAACM,IAAP,CAAYC,MAAvB;AAAA,OAA3B,CAAlB;AACA,UAAMC,IAAI,GAAGT,KAAK,CAACrD,SAAN,CAAgByD,SAAhB,CAAb;AACA,UAAMnD,QAAQ,gCAAQwD,IAAI,CAACxD,QAAb,IAAuBgD,MAAM,CAACM,IAAP,CAAYtD,QAAnC,EAAd;;AACA,UAAMN,SAAS,sBAAQqD,KAAK,CAACrD,SAAd,CAAf;;AACAA,MAAAA,SAAS,CAACyD,SAAD,CAAT,qBAA4BK,IAA5B;AAAkCxD,QAAAA,QAAQ,EAARA;AAAlC;AACA,+BACO+C,KADP;AAEIrD,QAAAA,SAAS,EAATA,SAFJ;AAGIW,QAAAA,eAAe,EAAE,KAHrB;AAIIoD,QAAAA,YAAY,EAAE;AAJlB;;AAMJ,SAAKrB,mBAAL;AACI,+BACOW,KADP;AAEI1C,QAAAA,eAAe,EAAE,KAFrB;AAGIC,QAAAA,qBAAqB,EAAE0C,MAAM,CAACE;AAHlC;;AAKJ;AACI,+BACOH,KADP;AA/CR;AAmDH,CApDD;;AAsDA,eAAeD,WAAf","sourcesContent":["export const initialState = {\n    mainPosts: [{\n        user: {\n            id: 1,\n            nickname: 'zero',\n        },\n        content: 'cho',\n        img: '',\n        comments: [],\n    }],\n    imagePaths: [],\n    isAddingPost: false,\n    addPostErrorReason: false,\n    postAdded: false,\n    isAddingComment: false,\n    addCommentErrorReason: false,\n    commentAdded: false,\n}\n\nconst dummyPost = {\n    user: {\n        id: 1,\n        nickname:'oiry',\n    },\n    content: 'this is dummy',\n    comments: [],\n}\n\nconst dummyComments = {\n    user: {\n        nickname: 2,\n        id: 1,\n    },\n    content: 'this is dummy comment',\n    createdAt: new Date(),\n}\n\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\n\nconst PostReducer = (state=initialState, action) => {\n    switch(action.type){\n        case ADD_POST_REQUEST:\n            return{\n                ...state,\n                isAddingPost: true,\n                postAdded: false,\n                addPostErrorReason: '',\n            }\n        case ADD_POST_SUCCESS:\n            return{\n                ...state,\n                mainPosts: [dummyPost, ...state.mainPosts],\n                isAddingPost: false,\n                postAdded: true,\n            }\n        case ADD_POST_FAILURE:\n            return{\n                ...state,\n                isAddingPost: false,\n                addPostErrorReason: action.error,\n            }\n        case ADD_COMMENT_REQUEST:\n            return{\n                ...state,\n                isAddingComment: true,\n                commentAdded: false,\n                addCommentErrorReason: '',\n            }\n        case ADD_COMMENT_SUCCESS:\n            const postIndex = state.mainPosts.findIndex(v=>v.id === action.data.postId);\n            const post = state.mainPosts[postIndex];\n            const comments = [ ...post.comments, action.data.comments];\n            const mainPosts = [ ...state.mainPosts ];\n            mainPosts[postIndex] = { ...post, comments };\n            return{\n                ...state,\n                mainPosts,\n                isAddingComment: false,\n                CommentAdded: true,\n            }\n        case ADD_COMMENT_FAILURE:\n            return{\n                ...state,\n                isAddingComment: false,\n                addCommentErrorReason: action.error,\n            }  \n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default PostReducer;"]},"metadata":{},"sourceType":"module"}