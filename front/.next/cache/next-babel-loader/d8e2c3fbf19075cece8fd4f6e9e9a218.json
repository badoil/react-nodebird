{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, memo, useRef, useEffect } from 'react';\nimport { Card, Button, Avatar, List, Comment, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\nimport { LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\nimport CommentForm from './commentForm';\nimport FollowButton from './followButton';\nconst PostCard = memo(({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  const postMemory = useRef(post);\n  useEffect(() => {\n    console.log('useEffect:', postMemory);\n  });\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, [commentFormOpened]);\n  const onLikeOrUnlike = useCallback(() => {\n    if (!me) {\n      alert('No Authentication');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  const onUnfollow = useCallback(postUserId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: postUserId\n    });\n  }, []);\n  const onFollow = useCallback(postUserId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: postUserId\n    });\n  }, []);\n  const onRemovePost = useCallback(postId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: postId\n    });\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLikeOrUnlike\n    }), __jsx(EditOutlined, {\n      key: \"edit\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId ? __jsx(React.Fragment, null, __jsx(Button, null, \"update\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"remove\")) : __jsx(Button, null, \"send a complaint\"))\n    }, __jsx(EllipsisOutlined, {\n      key: \"ellipsis\"\n    }))],\n    title: post.Retweet && post.Retweet.User && post.Retweet.User.nickname && me && me.userId ? `${me.userId} retweet ${post.Retweet.User.nickname}'s post` : null,\n    extra: __jsx(FollowButton, {\n      post: post,\n      me: me,\n      onFollow: onFollow,\n      onUnfollow: onUnfollow\n    })\n  }, post.RetweetId && post.Retweet && post.Retweet.User && post.Retweet.User.id ? __jsx(Card, {\n    cover: post.Retweet.Images && post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: `comments: ${post.comments ? post.comments.length : 0}`,\n    itemLayout: \"horizontal\",\n    dataSource: post.comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        as: `/user/${item.User.id}`,\n        href: {\n          pathname: `/user`,\n          query: {\n            id: item.User.id\n          }\n        }\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n});\nPostCard.propTypes = {\n  card: PropTypes.shape({\n    User: PropTypes.object,\n    img: PropTypes.string,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/components/postCard.js"],"names":["React","useState","useCallback","memo","useRef","useEffect","Card","Button","Avatar","List","Comment","Popover","PropTypes","useDispatch","useSelector","Link","EllipsisOutlined","EditOutlined","HeartOutlined","TwitterOutlined","LOAD_COMMENTS_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","UNFOLLOW_USER_REQUEST","FOLLOW_USER_REQUEST","PostImages","PostCardContent","CommentForm","FollowButton","PostCard","post","dispatch","me","state","user","commentFormOpened","setCommentFormOpened","liked","Likers","find","v","id","postMemory","console","log","onToggleComment","prev","type","data","onLikeOrUnlike","alert","onRetweet","onUnfollow","postUserId","onFollow","onRemovePost","postId","createdAt","Images","UserId","Retweet","User","nickname","userId","RetweetId","pathname","query","content","comments","length","item","propTypes","card","shape","object","img","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, memo, useRef, useEffect } from 'react';\nimport { Card, Button, Avatar, List, Comment, Popover  } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\n\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\n\nimport { LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, \n        UNLIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\nimport CommentForm from './commentForm';\nimport FollowButton from './followButton';\n\n\nconst PostCard = memo(({ post } ) => {\n  const dispatch = useDispatch()\n  const { me } = useSelector(state => state.user);\n  const [ commentFormOpened, setCommentFormOpened ] = useState(false);\n  \n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id)\n\n  const postMemory = useRef(post);\n  useEffect(() => {\n    console.log('useEffect:', postMemory)\n  })\n  \n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n    if(!commentFormOpened){\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      })\n    }\n\n  }, [commentFormOpened])\n\n  const onLikeOrUnlike = useCallback(() => {\n    if(!me){\n      alert('No Authentication');\n    }\n    if(liked){\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id,\n      })\n    }else{\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id,\n      })\n    }\n  },[me && me.id, post && post.id, liked])\n\n  const onRetweet = useCallback(() => {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    })\n  }, [me && me.id, post && post.id])\n\n  const onUnfollow = useCallback(postUserId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: postUserId,\n    })\n  }, [])\n\n  const onFollow = useCallback(postUserId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: postUserId,\n    })\n  }, [])\n\n  const onRemovePost = useCallback(postId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST, \n      data: postId,\n    })\n  }, []);\n\n    return(\n      <div>\n        <Card\n        key={+post.createdAt}\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <TwitterOutlined key='retweet' onClick={onRetweet} />,\n          <HeartOutlined key='heart' onClick={onLikeOrUnlike} />,\n          <EditOutlined key=\"edit\" onClick={onToggleComment} />,\n          <Popover\n            key='ellipsis'\n            content={( \n              <Button.Group>\n              {me && post.UserId\n              ?(<>\n                <Button>update</Button>\n                <Button type='danger' onClick={onRemovePost(post.id)}>remove</Button>\n              </>)\n              :<Button>send a complaint</Button>}\n              </Button.Group>\n            )}\n          >\n             <EllipsisOutlined key=\"ellipsis\" />\n          </Popover>\n         ,\n        ]}\n        title={post.Retweet && post.Retweet.User && post.Retweet.User.nickname && me && me.userId? `${me.userId} retweet ${post.Retweet.User.nickname}'s post`: null}\n        extra={<FollowButton post={post} me={me} onFollow={onFollow} onUnfollow={onUnfollow} />}\n        >\n          {\n            post.RetweetId && post.Retweet && post.Retweet.User && post.Retweet.User.id?\n            (<Card\n              cover={post.Retweet.Images && post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\n            >\n              <Card.Meta \n                avatar={<Link href={{ pathname: `/user`, query: {id: post.Retweet.User.id}}} as={`/user/${post.Retweet.User.id}`} >\n                         <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n                      </Link>}\n                title={post.Retweet.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />}\n              />\n            </Card>\n            ):(\n          <Card.Meta \n          avatar={<Link href={{ pathname: `/user`, query: {id: post.User.id}}} as={`/user/${post.User.id}`} >\n                   <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n          />) \n          }        \n        </Card>\n        \n        { commentFormOpened && \n          <>\n            <CommentForm post={post} />\n            <List \n              header={`comments: ${post.comments? post.comments.length: 0}`}\n              itemLayout=\"horizontal\"\n              dataSource={post.comments || []}\n              renderItem={item => (\n                <li>\n                  <Comment \n                  author={item.User.nickname}\n                  avatar={<Link as={`/user/${item.User.id}`} href={{ pathname: `/user`, query: {id: item.User.id}}} >\n                           <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                          </Link>}\n                  content={item.content}\n                  />\n                </li>\n              )}\n            \n            />\n          </>\n        }\n      </div>\n    )\n});\n\nPostCard.propTypes = {\n    card: PropTypes.shape({\n        User: PropTypes.object,\n        img: PropTypes.string,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}