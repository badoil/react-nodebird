{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addCommentAPI),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {\n  return _regeneratorRuntime.wrap(function addCommentAPI$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(3000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 5:\n          _context4.next = 12;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction loadMainPostAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadMainPost() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadMainPostAPI);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context6.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPost() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadMainPost)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/post.js"],"names":["addPost","watchAddPost","addCommentAPI","addComment","watchAddComment","loadMainPost","watchLoadMainPost","postSaga","all","fork","call","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","addPostAPI","postData","post","withCredentials","action","data","result","type","console","error","postId","loadMainPostAPI","get"],"mappings":"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","sourcesContent":["import { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, } from '../reducers/post';\n\nfunction addPostAPI(postData){\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    })\n}\n\nfunction* addPost(action){\n    try{\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* addCommentAPI(){\n    \n}\n\nfunction* addComment(action){\n    try{\n        yield delay(3000);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId\n            }\n        })\n\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error,\n        })\n    }\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadMainPostAPI(){\n    return axios.get('/posts');\n}\n\nfunction* loadMainPost(){\n    try{\n        const result = yield call(loadMainPostAPI);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLoadMainPost(){\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadMainPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}