{"ast":null,"code":"import { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(formData) {\n  return axios.post('/post', formData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log('addPostResult: ', result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI(data) {\n  console.log('addCommentAPI data:', data);\n  return axios.post(`post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    console.log('addCommentActionData: ', action.data);\n    const result = yield call(addCommentAPI, action.data);\n    console.log('addCommentResult:', result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (err) {\n    console.error('addcommentError', err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: action.error\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction loadMainPostAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPost() {\n  try {\n    const result = yield call(loadMainPostAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLoadMainPost() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPost);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e), yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log('likePostUserId:', result.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/unlike`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadMainPost), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/post.js"],"names":["all","fork","call","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_SUCCESS","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","addPostAPI","formData","post","withCredentials","addPost","action","result","data","console","log","type","err","error","watchAddPost","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","get","loadComments","comments","e","watchLoadComments","loadMainPostAPI","loadMainPost","watchLoadMainPost","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","uploadImagesAPI","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACQC,mBADR,EAC6BC,mBAD7B,EACkDC,mBADlD,EAEQC,uBAFR,EAEiCC,uBAFjC,EAE0DC,uBAF1D,EAGQC,0BAHR,EAGoCC,0BAHpC,EAGgEC,0BAHhE,EAIQC,uBAJR,EAIiCC,uBAJjC,EAI0DC,uBAJ1D,EAKQC,qBALR,EAK+BC,qBAL/B,EAKsDC,qBALtD,EAMQC,qBANR,EAM+BC,qBAN/B,EAMsDC,qBANtD,EAOQC,iBAPR,EAO2BC,iBAP3B,EAO8CC,iBAP9C,EAQQC,mBARR,EAQ6BC,mBAR7B,EAQkDC,mBARlD,QAQ6E,kBAR7E;;AAUA,SAASC,UAAT,CAAoBC,QAApB,EAA6B;AACzB,SAAO7B,KAAK,CAAC8B,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACjCE,IAAAA,eAAe,EAAE;AADgB,GAA9B,CAAP;AAGH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMtC,IAAI,CAACgC,UAAD,EAAaK,MAAM,CAACE,IAApB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,MAA/B;AACA,UAAMpC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEpC,gBADA;AAENiC,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMI,GAAN,EAAU;AACPH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMzC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEnC,gBADA;AAENqC,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUE,YAAV,GAAwB;AACpB,QAAM5C,UAAU,CAACI,gBAAD,EAAmB+B,OAAnB,CAAhB;AACH;;AAED,SAASU,aAAT,CAAuBP,IAAvB,EAA4B;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,IAAnC;AACA,SAAOnC,KAAK,CAAC8B,IAAN,CAAY,QAAOK,IAAI,CAACQ,MAAO,UAA/B,EAA0C;AAAEC,IAAAA,OAAO,EAAET,IAAI,CAACS;AAAhB,GAA1C,EAAqE;AACxEb,IAAAA,eAAe,EAAE;AADuD,GAArE,CAAP;AAGH;;AAED,UAAUc,UAAV,CAAqBZ,MAArB,EAA4B;AACxB,MAAG;AACCG,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCJ,MAAM,CAACE,IAA7C;AACA,UAAMD,MAAM,GAAG,MAAMtC,IAAI,CAAC8C,aAAD,EAAgBT,MAAM,CAACE,IAAvB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,MAAjC;AACA,UAAMpC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEjC,mBADA;AAEN8B,MAAAA,IAAI,EAAE;AACFQ,QAAAA,MAAM,EAAEV,MAAM,CAACE,IAAP,CAAYQ,MADlB;AAEFG,QAAAA,OAAO,EAAEZ,MAAM,CAACC;AAFd;AAFA,KAAD,CAAT;AAOH,GAXD,CAWC,OAAMI,GAAN,EAAU;AACPH,IAAAA,OAAO,CAACI,KAAR,CAAc,iBAAd,EAAiCD,GAAjC;AACA,UAAMzC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEhC,mBADA;AAENkC,MAAAA,KAAK,EAAEP,MAAM,CAACO;AAFR,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,eAAV,GAA2B;AACvB,QAAMlD,UAAU,CAACO,mBAAD,EAAsByC,UAAtB,CAAhB;AACH;;AAED,SAASG,eAAT,CAAyBL,MAAzB,EAAgC;AAC5B,SAAO3C,KAAK,CAACiD,GAAN,CAAW,SAAQN,MAAO,WAA1B,CAAP;AACH;;AAED,UAAUO,YAAV,CAAuBjB,MAAvB,EAA+B;AAC3B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMtC,IAAI,CAACoD,eAAD,EAAkBf,MAAM,CAACE,IAAzB,CAAzB;AACA,UAAMrC,GAAG,CAAC;AACRwC,MAAAA,IAAI,EAAErB,qBADE;AAERkB,MAAAA,IAAI,EAAE;AACJQ,QAAAA,MAAM,EAAEV,MAAM,CAACE,IADX;AAEJgB,QAAAA,QAAQ,EAAEjB,MAAM,CAACC;AAFb;AAFE,KAAD,CAAT;AAOD,GATD,CASE,OAAOiB,CAAP,EAAU;AACVhB,IAAAA,OAAO,CAACI,KAAR,CAAcY,CAAd;AACA,UAAMtD,GAAG,CAAC;AACRwC,MAAAA,IAAI,EAAEpB,qBADE;AAERsB,MAAAA,KAAK,EAAEY;AAFC,KAAD,CAAT;AAID;AACF;;AAEH,UAAUC,iBAAV,GAA6B;AACzB,QAAMxD,UAAU,CAACmB,qBAAD,EAAwBkC,YAAxB,CAAhB;AACH;;AAED,SAASI,eAAT,GAA0B;AACtB,SAAOtD,KAAK,CAACiD,GAAN,CAAU,QAAV,CAAP;AACH;;AAED,UAAUM,YAAV,GAAwB;AACpB,MAAG;AACC,UAAMrB,MAAM,GAAG,MAAMtC,IAAI,CAAC0D,eAAD,CAAzB;AACA,UAAMxD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAE9B,uBADA;AAEN2B,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMI,GAAN,EAAU;AACPH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMzC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAE7B,uBADA;AAEN+B,MAAAA,KAAK,EAAED;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUiB,iBAAV,GAA6B;AACzB,QAAM3D,UAAU,CAACU,uBAAD,EAA0BgD,YAA1B,CAAhB;AACH;;AAED,SAASE,mBAAT,CAA6BC,GAA7B,EAAiC;AAC7B,SAAO1D,KAAK,CAACiD,GAAN,CAAW,YAAWS,GAAI,EAA1B,CAAP;AACH;;AAED,UAAUC,gBAAV,CAA2B1B,MAA3B,EAAkC;AAC9B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMtC,IAAI,CAAC6D,mBAAD,EAAsBxB,MAAM,CAACE,IAA7B,CAAzB;AACA,UAAMrC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAE3B,0BADA;AAENwB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMiB,CAAN,EAAQ;AACLhB,IAAAA,OAAO,CAACI,KAAR,CAAcY,CAAd,GACA,MAAMtD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAE1B,0BADA;AAEN4B,MAAAA,KAAK,EAAEY;AAFD,KAAD,CADT;AAKH;AACJ;;AAED,UAAUQ,qBAAV,GAAiC;AAC7B,QAAM/D,UAAU,CAACa,0BAAD,EAA6BiD,gBAA7B,CAAhB;AACH;;AAED,SAASE,gBAAT,CAA0BC,EAA1B,EAA6B;AACzB,SAAO9D,KAAK,CAACiD,GAAN,CAAW,QAAOa,EAAG,QAArB,CAAP;AACH;;AAED,UAAUC,aAAV,CAAwB9B,MAAxB,EAA+B;AAC3B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMtC,IAAI,CAACiE,gBAAD,EAAmB5B,MAAM,CAACE,IAA1B,CAAzB;AACA,UAAMrC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAExB,uBADA;AAENqB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMiB,CAAN,EAAQ;AACLhB,IAAAA,OAAO,CAACI,KAAR,CAAcY,CAAd;AACA,UAAMtD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEvB,uBADA;AAENyB,MAAAA,KAAK,EAAEY;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUY,kBAAV,GAA8B;AAC1B,QAAMnE,UAAU,CAACgB,uBAAD,EAA0BkD,aAA1B,CAAhB;AACH;;AAED,SAASE,eAAT,CAAyBpC,QAAzB,EAAkC;AAC9B,SAAO7B,KAAK,CAAC8B,IAAN,CAAW,cAAX,EAA2BD,QAA3B,EAAqC;AACxCE,IAAAA,eAAe,EAAE;AADuB,GAArC,CAAP;AAGH;;AAED,UAAUmC,YAAV,CAAuBjC,MAAvB,EAA8B;AAC1B,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMtC,IAAI,CAACqE,eAAD,EAAkBhC,MAAM,CAACE,IAAzB,CAAzB;AACA,UAAMrC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEjB,qBADA;AAENc,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAMiB,CAAN,EAAQ;AACLhB,IAAAA,OAAO,CAACI,KAAR,CAAcY,CAAd;AACA,UAAMtD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAElB,qBADA;AAENoB,MAAAA,KAAK,EAAEY;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUe,iBAAV,GAA6B;AACzB,QAAMtE,UAAU,CAACsB,qBAAD,EAAwB+C,YAAxB,CAAhB;AACH;;AAED,SAASE,WAAT,CAAqBzB,MAArB,EAA4B;AACxB,SAAO3C,KAAK,CAAC8B,IAAN,CAAY,QAAOa,MAAO,OAA1B,EAAkC,EAAlC,EAAsC;AACzCZ,IAAAA,eAAe,EAAE;AADwB,GAAtC,CAAP;AAGH;;AAED,UAAUsC,QAAV,CAAmBpC,MAAnB,EAA0B;AACtB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMtC,IAAI,CAACwE,WAAD,EAAcnC,MAAM,CAACE,IAArB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,MAAM,CAACC,IAAtC;AACA,UAAMrC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEf,iBADA;AAENY,MAAAA,IAAI,EAAC;AACDQ,QAAAA,MAAM,EAAEV,MAAM,CAACE,IADd;AAEDmC,QAAAA,MAAM,EAAEpC,MAAM,CAACC;AAFd;AAFC,KAAD,CAAT;AAOH,GAVD,CAUC,OAAMiB,CAAN,EAAQ;AACLhB,IAAAA,OAAO,CAACI,KAAR,CAAcY,CAAd;AACA,UAAMtD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEd,iBADA;AAENgB,MAAAA,KAAK,EAAEY;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUmB,aAAV,GAAyB;AACrB,QAAM1E,UAAU,CAACyB,iBAAD,EAAoB+C,QAApB,CAAhB;AACH;;AAED,SAASG,aAAT,CAAuB7B,MAAvB,EAA8B;AAC1B,SAAO3C,KAAK,CAACyE,MAAN,CAAc,SAAQ9B,MAAO,SAA7B,EAAuC;AAC1CZ,IAAAA,eAAe,EAAE;AADyB,GAAvC,CAAP;AAGH;;AAED,UAAU2C,UAAV,CAAqBzC,MAArB,EAA4B;AACxB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMtC,IAAI,CAAC4E,aAAD,EAAgBvC,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAMrC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEZ,mBADA;AAENS,MAAAA,IAAI,EAAE;AACFQ,QAAAA,MAAM,EAAEV,MAAM,CAACE,IADb;AAEFmC,QAAAA,MAAM,EAAEpC,MAAM,CAACC,IAAP,CAAYmC;AAFlB;AAFA,KAAD,CAAT;AAOH,GATD,CASC,OAAMlB,CAAN,EAAQ;AACLhB,IAAAA,OAAO,CAACI,KAAR,CAAcY,CAAd;AACA,UAAMtD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEX,mBADA;AAENa,MAAAA,KAAK,EAAEY;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUuB,eAAV,GAA2B;AACvB,QAAM9E,UAAU,CAAC4B,mBAAD,EAAsBiD,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMlF,GAAG,CAAC,CACNC,IAAI,CAAC8C,YAAD,CADE,EAEN9C,IAAI,CAACoD,eAAD,CAFE,EAGNpD,IAAI,CAAC0D,iBAAD,CAHE,EAIN1D,IAAI,CAAC6D,iBAAD,CAJE,EAKN7D,IAAI,CAACiE,qBAAD,CALE,EAMNjE,IAAI,CAACqE,kBAAD,CANE,EAONrE,IAAI,CAACwE,iBAAD,CAPE,EAQNxE,IAAI,CAAC4E,aAAD,CARE,EASN5E,IAAI,CAACgF,eAAD,CATE,CAAD,CAAT;AAWH","sourcesContent":["import { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, \n        LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n        LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, \n        LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, \n        UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, \n        LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, \n        UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(formData){\n    return axios.post('/post', formData, {\n        withCredentials: true,\n    })\n}\n\nfunction* addPost(action){\n    try{\n        const result = yield call(addPostAPI, action.data);\n        console.log('addPostResult: ', result)\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction addCommentAPI(data){\n    console.log('addCommentAPI data:', data)\n    return axios.post(`post/${data.postId}/comment`, { content: data.content }, {\n        withCredentials: true,\n    })\n}\n\nfunction* addComment(action){\n    try{\n        console.log('addCommentActionData: ', action.data)\n        const result = yield call(addCommentAPI, action.data);\n        console.log('addCommentResult:', result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            }\n        })\n    }catch(err){\n        console.error('addcommentError', err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error,\n        })\n    }\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId){\n    return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n    try {\n      const result = yield call(loadCommentsAPI, action.data);\n      yield put({\n        type: LOAD_COMMENTS_SUCCESS,\n        data: {\n          postId: action.data,\n          comments: result.data,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      yield put({\n        type: LOAD_COMMENTS_FAILURE,\n        error: e,\n      });\n    }\n  }\n\nfunction* watchLoadComments(){\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\n}\n\nfunction loadMainPostAPI(){\n    return axios.get('/posts');\n}\n\nfunction* loadMainPost(){\n    try{\n        const result = yield call(loadMainPostAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLoadMainPost(){\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPost);\n}\n\nfunction loadHashtagPostsAPI(tag){\n    return axios.get(`/hashtag/${tag}`)\n}\n\nfunction* loadHashtagPosts(action){\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e),\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts(){\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\n}\n\nfunction loadUserPostsAPI(id){\n    return axios.get(`user/${id}/posts`)\n}\n\nfunction* loadUserPosts(action){\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts(){\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction uploadImagesAPI(formData){\n    return axios.post('/post/images', formData, {\n        withCredentials: true,\n    })\n}\n\nfunction* uploadImages(action){\n    try{\n        const result = yield call(uploadImagesAPI, action.data)\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUploadImages(){\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId){\n    return axios.post(`post/${postId}/like`, {}, {\n        withCredentials: true,\n    })\n}\n\nfunction* likePost(action){\n    try{\n        const result = yield call(likePostAPI, action.data);\n        console.log('likePostUserId:', result.data)\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data:{\n                postId: action.data,\n                userId: result.data,\n            }\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLikePost(){\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId){\n    return axios.delete(`/post/${postId}/unlike`, {\n        withCredentials: true,\n    })\n}\n\nfunction* unlikePost(action){\n    try{\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId,\n            }\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUnlikePost(){\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadComments),\n        fork(watchLoadMainPost),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}