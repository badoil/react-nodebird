{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/postCard';\nimport { Avatar, Card } from 'antd';\n\nvar User = function User(_ref) {\n  var id = _ref.id;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_USER_REQUEST,\n      data: id\n    });\n    dispatch({\n      type: LOAD_USER_POSTS_REQUEST,\n      data: id\n    });\n  }, []);\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"tweet\"\n    }, \"jack, jack\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"followings\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"Followers\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      post: c,\n      key: +c.createdAt\n    });\n  }));\n};\n\nUser.propTypes = {\n  id: Proptypes.number.isRequired\n};\n\nUser.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('user getInitialProps: ', context.query.id);\n          return _context.abrupt(\"return\", {\n            id: parseInt(context.query.id, 10)\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default User;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/pages/user.js"],"names":["React","useEffect","Proptypes","useDispatch","useSelector","LOAD_USER_REQUEST","LOAD_USER_POSTS_REQUEST","PostCard","Avatar","Card","User","id","dispatch","state","post","mainPosts","user","userInfo","type","data","Posts","Followings","Followers","nickname","map","c","createdAt","propTypes","number","isRequired","getInitialProps","context","console","log","query","parseInt"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;AACrB,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AADqB,qBAECC,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAFZ;AAAA,MAEbC,SAFa,gBAEbA,SAFa;;AAAA,sBAGAX,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAHX;AAAA,MAGbC,QAHa,iBAGbA,QAHa;;AAKrBhB,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEb,iBADD;AAELc,MAAAA,IAAI,EAAER;AAFD,KAAD,CAAR;AAIAC,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEZ,uBADD;AAELa,MAAAA,IAAI,EAAER;AAFD,KAAD,CAAR;AAIH,GATQ,EASN,EATM,CAAT;AAWA,SACI,mBAEQM,QAAQ,GACR,MAAC,IAAD;AACI,IAAA,OAAO,EAAE,CACL;AAAK,MAAA,GAAG,EAAC;AAAT,qBAEI,iBAFJ,EAGKA,QAAQ,CAACG,KAHd,CADK,EAML;AAAK,MAAA,GAAG,EAAC;AAAT,qBAEI,iBAFJ,EAGKH,QAAQ,CAACI,UAHd,CANK,EAWL;AAAK,MAAA,GAAG,EAAC;AAAT,oBAEI,iBAFJ,EAGKJ,QAAQ,CAACK,SAHd,CAXK;AADb,KAmBI,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EAAE,MAAC,MAAD,QAASL,QAAQ,CAACM,QAAT,CAAkB,CAAlB,CAAT,CADZ;AAEI,IAAA,KAAK,EAAEN,QAAQ,CAACM;AAFpB,IAnBJ,CADQ,GAyBP,IA3BT,EA8BQR,SAAS,CAACS,GAAV,CAAc,UAAAC,CAAC;AAAA,WACP,MAAC,QAAD;AAAU,MAAA,IAAI,EAAEA,CAAhB;AAAmB,MAAA,GAAG,EAAE,CAACA,CAAC,CAACC;AAA3B,MADO;AAAA,GAAf,CA9BR,CADJ;AAqCH,CArDD;;AAuDAhB,IAAI,CAACiB,SAAL,GAAiB;AACbhB,EAAAA,EAAE,EAAET,SAAS,CAAC0B,MAAV,CAAiBC;AADR,CAAjB;;AAIAnB,IAAI,CAACoB,eAAL,GAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,OAAO,CAACG,KAAR,CAAcvB,EAApD;AADmB,2CAEZ;AAAEA,YAAAA,EAAE,EAAGwB,QAAQ,CAACJ,OAAO,CAACG,KAAR,CAAcvB,EAAf,EAAmB,EAAnB;AAAf,WAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAKA,eAAeD,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/postCard';\nimport { Avatar, Card } from 'antd';\n\nconst User = ({ id }) => {\n    const dispatch = useDispatch();\n    const { mainPosts } = useSelector(state => state.post);\n    const { userInfo } = useSelector(state => state.user);\n\n    useEffect(() => {\n        dispatch({\n            type: LOAD_USER_REQUEST,\n            data: id,\n        });\n        dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            data: id,\n        })\n    }, []);\n\n    return(\n        <div>\n            {\n                userInfo? \n                <Card\n                    actions={[\n                        <div key=\"tweet\">\n                            jack, jack\n                            <br />\n                            {userInfo.Posts}\n                        </div>,\n                        <div key=\"following\">\n                            followings\n                            <br />\n                            {userInfo.Followings}\n                        </div>,\n                        <div key=\"follower\">\n                            Followers\n                            <br />\n                            {userInfo.Followers}\n                        </div>,\n                    ]}\n                >\n                    <Card.Meta \n                        avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\n                        title={userInfo.nickname}\n                    />\n                </Card>\n                :null\n            }\n            {\n                mainPosts.map(c => (\n                        <PostCard post={c} key={+c.createdAt} />\n                ))\n            }\n        </div>\n    )\n}\n\nUser.propTypes = {\n    id: Proptypes.number.isRequired,\n}\n\nUser.getInitialProps = async (context) => {\n    console.log('user getInitialProps: ', context.query.id);\n    return { id : parseInt(context.query.id, 10) }\n}\n\nexport default User;"]},"metadata":{},"sourceType":"module"}