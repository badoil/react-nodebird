{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      isAddingComment = _useSelector2.isAddingComment,\n      commentAdded = _useSelector2.commentAdded;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('you need to login');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  var onToggleComment = useCallback(function (e) {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      src: post.img,\n      alt: \"example\"\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      key: \"retweet\"\n    }), __jsx(HeartOutlined, {\n      key: \"heart\"\n    }), __jsx(EditOutlined, {\n      key: \"edit\",\n      onClick: onToggleComment\n    }), __jsx(EllipsisOutlined, {\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"Follow\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          as: \"/hashtag/\".concat(v.slice(1)),\n          href: {\n            pathname: \"/hashtag\",\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(\"form\", {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    row: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"jack\")), __jsx(List, {\n    header: \"comments: \".concat(post.comments ? post.comments.length : 0),\n    itemLayout: \"horizontal\",\n    dataSource: post.comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.user.nickname,\n        avatar: __jsx(Link, {\n          as: \"/user/\".concat(item.User.id),\n          href: {\n            pathname: \"/user\",\n            query: {\n              id: item.User.id\n            }\n          }\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  card: PropTypes.shape({\n    User: PropTypes.object,\n    img: PropTypes.string,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/components/postCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Form","List","Input","Comment","PropTypes","useDispatch","useSelector","Link","EllipsisOutlined","EditOutlined","HeartOutlined","TwitterOutlined","ADD_COMMENT_REQUEST","PostCard","post","dispatch","state","user","me","isAddingComment","commentAdded","commentFormOpened","setCommentFormOpened","commentText","setCommentText","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onToggleComment","prev","onChangeCommentText","target","value","createdAt","img","pathname","query","User","nickname","content","split","map","v","match","slice","tag","comments","length","item","propTypes","card","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment,  } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\n\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\n\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\n\nconst PostCard = ({ post } ) => {\n  const dispatch = useDispatch()\n  const { me } = useSelector(state => state.user);\n  const { isAddingComment, commentAdded } = useSelector(state => state.post);\n  const [ commentFormOpened, setCommentFormOpened ] = useState(false);\n  const [ commentText, setCommentText ] = useState('');\n\n  useEffect(() => {\n    setCommentText('');\n  }, [ commentAdded === true]);\n\n  const onSubmitComment = useCallback((e) => {\n    e.preventDefault();\n    if(!me){\n      return alert('you need to login');\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n      }\n    })\n  }, [ me && me.id ])\n\n  const onToggleComment = useCallback((e) => {\n    setCommentFormOpened(prev => !prev);\n\n  }, [])\n\n  const onChangeCommentText = useCallback((e) => {\n    setCommentText(e.target.value);\n  }, [])\n\n    return(\n      <div>\n        <Card\n        key={+post.createdAt}\n        cover={post.img && <img src={post.img} alt='example' />}\n        actions={[\n          <TwitterOutlined key='retweet'/>,\n          <HeartOutlined key='heart' />,\n          <EditOutlined key=\"edit\" onClick={onToggleComment} />,\n          <EllipsisOutlined key=\"ellipsis\" />,\n        ]}\n        extra={<Button>Follow</Button>}\n        >\n          <Card.Meta \n          avatar={<Link href={{ pathname: `/user`, query: {id: post.User.id}}} as={`/user/${post.User.id}`} >\n                   <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>}\n          title={post.User.nickname}\n          description={(<div>{post.content.split(/(#[^\\s]+)/).map((v) => {\n            if(v.match(/#[^\\s]+/)){\n              return (\n                <Link as={`/hashtag/${v.slice(1)}`} href={{ pathname: `/hashtag`, query: {tag: v.slice(1)}}}  key={v} >\n                  <a>{v}</a>\n                </Link>\n              )\n            }\n            return v;\n          })}</div>)}\n          />         \n        </Card>\n        { commentFormOpened && \n          <>\n            <form onSubmit={onSubmitComment} >\n              <Form.Item>\n                <Input.TextArea row={4} value={commentText} onChange={onChangeCommentText} />\n              </Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment} >jack</Button>\n            </form>\n            <List \n              header={`comments: ${post.comments? post.comments.length: 0}`}\n              itemLayout=\"horizontal\"\n              dataSource={post.comments || []}\n              renderItem={item => (\n                <li>\n                  <Comment \n                  author={item.user.nickname}\n                  avatar={<Link as={`/user/${item.User.id}`} href={{ pathname: `/user`, query: {id: item.User.id}}} >\n                           <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                          </Link>}\n                  content={item.content}\n                  />\n                </li>\n              )}\n            \n            />\n          </>\n        }\n      </div>\n    )\n};\n\nPostCard.propTypes = {\n    card: PropTypes.shape({\n        User: PropTypes.object,\n        img: PropTypes.string,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}