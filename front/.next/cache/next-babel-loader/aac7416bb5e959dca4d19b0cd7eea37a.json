{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  isAddingPost: false,\n  addPostErrorReason: false,\n  postAdded: false,\n  isAddingComment: false,\n  addCommentErrorReason: false,\n  commentAdded: false,\n  loadMainPostErrorReason: false,\n  singlePost: null\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nconst PostReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread({}, state, {\n        isAddingPost: true,\n        postAdded: false,\n        addPostErrorReason: ''\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread({}, state, {\n        mainPosts: [action.data, ...state.mainPosts],\n        isAddingPost: false,\n        postAdded: true,\n        imagePaths: []\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread({}, state, {\n        isAddingPost: false,\n        addPostErrorReason: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread({}, state, {\n        isAddingComment: true,\n        commentAdded: false,\n        addCommentErrorReason: ''\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const comments = [...post.comments, action.data.comment];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          comments\n        });\n        return _objectSpread({}, state, {\n          mainPosts,\n          isAddingComment: false,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread({}, state, {\n        isAddingComment: false,\n        addCommentErrorReason: action.error\n      });\n\n    case LOAD_COMMENTS_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const comments = action.data.comments;\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          comments\n        });\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      return _objectSpread({}, state, {\n        mainPosts: !action.lastId ? [] : state.mainPosts,\n        hasMorePosts: action.lastId ? state.hasMorePosts : true\n      });\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      return _objectSpread({}, state, {\n        mainPosts: action.lastId ? action.data : state.mainPosts.concat(action.data),\n        hasMorePosts: action.data.length === 10\n      });\n\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      return _objectSpread({}, state, {\n        loadMainPostErrorReason: action.error\n      });\n\n    case UPLOAD_IMAGES_REQUEST:\n      return _objectSpread({}, state);\n\n    case UPLOAD_IMAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        imagePaths: [...state.imagePaths, ...action.data]\n      });\n\n    case UPLOAD_IMAGES_FAILURE:\n      return _objectSpread({}, state);\n\n    case REMOVE_IMAGE:\n      return _objectSpread({}, state, {\n        imagePaths: state.imagePaths.filter((v, i) => i !== action.index)\n      });\n\n    case LIKE_POST_REQUEST:\n      return _objectSpread({}, state);\n\n    case LIKE_POST_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Likers = [{\n          id: action.data.userId\n        }, ...post.Likers];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case LIKE_POST_FAILURE:\n      return _objectSpread({}, state);\n\n    case UNLIKE_POST_REQUEST:\n      return _objectSpread({}, state);\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Likers = post.Likers.filter(v => v.id !== action.data.userId);\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case UNLIKE_POST_FAILURE:\n      return _objectSpread({}, state);\n\n    case RETWEET_REQUEST:\n      return _objectSpread({}, state);\n\n    case RETWEET_SUCCESS:\n      return _objectSpread({}, state, {\n        mainPosts: [action.data, ...state.mainPosts]\n      });\n\n    case RETWEET_FAILURE:\n      return _objectSpread({}, state);\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread({}, state);\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread({}, state, {\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data)\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread({}, state);\n\n    case LOAD_POST_SUCCESS:\n      return _objectSpread({}, state, {\n        singlePost: action.data\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default PostReducer;","map":null,"metadata":{},"sourceType":"module"}