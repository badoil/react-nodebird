{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  console.log('post:', post);\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    isAddingComment,\n    commentAdded\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('you need to login');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  const onToggleComment = useCallback(e => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      src: post.img,\n      alt: \"example\"\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      key: \"retweet\"\n    }), __jsx(HeartOutlined, {\n      key: \"heart\"\n    }), __jsx(EditOutlined, {\n      key: \"edit\",\n      onClick: onToggleComment\n    }), __jsx(EllipsisOutlined, {\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"Follow\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/).map(v => {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: `/hashtag/${v.slice(1)}`,\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(\"form\", {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    row: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"jack\")), __jsx(List, {\n    header: `comments: ${post.comments ? post.comments.length : 0}`,\n    itemLayout: \"horizontal\",\n    dataSource: post.comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.user.nickname,\n      avatar: __jsx(Avatar, null, item.user.nickname[0]),\n      content: item.content\n    }))\n  })));\n};\n\nPostCard.propTypes = {\n  card: PropTypes.shape({\n    User: PropTypes.object,\n    img: PropTypes.string,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/components/postCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Form","List","Input","Comment","PropTypes","useDispatch","useSelector","Link","EllipsisOutlined","EditOutlined","HeartOutlined","TwitterOutlined","ADD_COMMENT_REQUEST","PostCard","post","console","log","dispatch","me","state","user","isAddingComment","commentAdded","commentFormOpened","setCommentFormOpened","commentText","setCommentText","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onToggleComment","prev","onChangeCommentText","target","value","createdAt","img","User","nickname","content","split","map","v","match","slice","comments","length","item","propTypes","card","shape","object","string"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,KAA3C,EAAkDC,OAAlD,QAAmE,MAAnE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,gBAAT,EAA2BC,YAA3B,EAAyCC,aAAzC,EAAwDC,eAAxD,QAA+E,mBAA/E;AAEA,SAASC,mBAAT,QAAoC,kBAApC;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,IAArB;AACA,QAAMG,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAASZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAoChB,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACL,IAAhB,CAArD;AACA,QAAM;AAAA,OAAES,iBAAF;AAAA,OAAqBC;AAArB,MAA8C9B,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM;AAAA,OAAE+B,WAAF;AAAA,OAAeC;AAAf,MAAkChC,QAAQ,CAAC,EAAD,CAAhD;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFQ,EAEN,CAAEJ,YAAY,KAAK,IAAnB,CAFM,CAAT;AAIA,QAAMK,eAAe,GAAGhC,WAAW,CAAEiC,CAAD,IAAO;AACzCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,CAACX,EAAJ,EAAO;AACL,aAAOY,KAAK,CAAC,mBAAD,CAAZ;AACD;;AACD,WAAOb,QAAQ,CAAC;AACdc,MAAAA,IAAI,EAAEnB,mBADQ;AAEdoB,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEnB,IAAI,CAACoB;AADT;AAFQ,KAAD,CAAf;AAMD,GAXkC,EAWhC,CAAEhB,EAAE,IAAIA,EAAE,CAACgB,EAAX,CAXgC,CAAnC;AAaA,QAAMC,eAAe,GAAGxC,WAAW,CAAEiC,CAAD,IAAO;AACzCJ,IAAAA,oBAAoB,CAACY,IAAI,IAAI,CAACA,IAAV,CAApB;AAED,GAHkC,EAGhC,EAHgC,CAAnC;AAKA,QAAMC,mBAAmB,GAAG1C,WAAW,CAAEiC,CAAD,IAAO;AAC7CF,IAAAA,cAAc,CAACE,CAAC,CAACU,MAAF,CAASC,KAAV,CAAd;AACD,GAFsC,EAEpC,EAFoC,CAAvC;AAIE,SACE,mBACE,MAAC,IAAD;AACA,IAAA,GAAG,EAAE,CAACzB,IAAI,CAAC0B,SADX;AAEA,IAAA,KAAK,EAAE1B,IAAI,CAAC2B,GAAL,IAAY;AAAK,MAAA,GAAG,EAAE3B,IAAI,CAAC2B,GAAf;AAAoB,MAAA,GAAG,EAAC;AAAxB,MAFnB;AAGA,IAAA,OAAO,EAAE,CACP,MAAC,eAAD;AAAiB,MAAA,GAAG,EAAC;AAArB,MADO,EAEP,MAAC,aAAD;AAAe,MAAA,GAAG,EAAC;AAAnB,MAFO,EAGP,MAAC,YAAD;AAAc,MAAA,GAAG,EAAC,MAAlB;AAAyB,MAAA,OAAO,EAAEN;AAAlC,MAHO,EAIP,MAAC,gBAAD;AAAkB,MAAA,GAAG,EAAC;AAAtB,MAJO,CAHT;AASA,IAAA,KAAK,EAAE,MAAC,MAAD;AATP,KAWE,MAAC,IAAD,CAAM,IAAN;AACA,IAAA,MAAM,EAAE,MAAC,MAAD,QAASrB,IAAI,CAAC4B,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADR;AAEA,IAAA,KAAK,EAAE7B,IAAI,CAAC4B,IAAL,CAAUC,QAFjB;AAGA,IAAA,WAAW,EAAG,mBAAM7B,IAAI,CAAC8B,OAAL,CAAaC,KAAb,CAAmB,WAAnB,EAAgCC,GAAhC,CAAqCC,CAAD,IAAO;AAC7D,UAAGA,CAAC,CAACC,KAAF,CAAQ,SAAR,CAAH,EAAsB;AACpB,eACE,MAAC,IAAD;AAAM,UAAA,IAAI,EAAG,YAAWD,CAAC,CAACE,KAAF,CAAQ,CAAR,CAAW,EAAnC;AAAsC,UAAA,GAAG,EAAEF;AAA3C,WAA+C,iBAAIA,CAAJ,CAA/C,CADF;AAGD;;AACD,aAAOA,CAAP;AACD,KAPmB,CAAN;AAHd,IAXF,CADF,EAyBIxB,iBAAiB,IACjB,4BACE;AAAM,IAAA,QAAQ,EAAEI;AAAhB,KACE,MAAC,IAAD,CAAM,IAAN,QACE,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAE,CAArB;AAAwB,IAAA,KAAK,EAAEF,WAA/B;AAA4C,IAAA,QAAQ,EAAEY;AAAtD,IADF,CADF,EAIE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEhB;AAAlD,YAJF,CADF,EAOE,MAAC,IAAD;AACE,IAAA,MAAM,EAAG,aAAYP,IAAI,CAACoC,QAAL,GAAepC,IAAI,CAACoC,QAAL,CAAcC,MAA7B,GAAqC,CAAE,EAD9D;AAEE,IAAA,UAAU,EAAC,YAFb;AAGE,IAAA,UAAU,EAAErC,IAAI,CAACoC,QAAL,IAAiB,EAH/B;AAIE,IAAA,UAAU,EAAEE,IAAI,IACd,kBACE,MAAC,OAAD;AACA,MAAA,MAAM,EAAEA,IAAI,CAAChC,IAAL,CAAUuB,QADlB;AAEA,MAAA,MAAM,EAAE,MAAC,MAAD,QAASS,IAAI,CAAChC,IAAL,CAAUuB,QAAV,CAAmB,CAAnB,CAAT,CAFR;AAGA,MAAA,OAAO,EAAES,IAAI,CAACR;AAHd,MADF;AALJ,IAPF,CA1BJ,CADF;AAqDH,CAvFD;;AAyFA/B,QAAQ,CAACwC,SAAT,GAAqB;AACjBC,EAAAA,IAAI,EAAElD,SAAS,CAACmD,KAAV,CAAgB;AAClBb,IAAAA,IAAI,EAAEtC,SAAS,CAACoD,MADE;AAElBf,IAAAA,GAAG,EAAErC,SAAS,CAACqD,MAFG;AAGlBb,IAAAA,OAAO,EAAExC,SAAS,CAACqD,MAHD;AAIlBjB,IAAAA,SAAS,EAAEpC,SAAS,CAACoD;AAJH,GAAhB;AADW,CAArB;AASA,eAAe3C,QAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment,  } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\n\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\n\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\n\nconst PostCard = ({ post } ) => {\n  console.log('post:', post);\n  const dispatch = useDispatch()\n  const { me } = useSelector(state => state.user);\n  const { isAddingComment, commentAdded } = useSelector(state => state.post);\n  const [ commentFormOpened, setCommentFormOpened ] = useState(false);\n  const [ commentText, setCommentText ] = useState('');\n\n  useEffect(() => {\n    setCommentText('');\n  }, [ commentAdded === true]);\n\n  const onSubmitComment = useCallback((e) => {\n    e.preventDefault();\n    if(!me){\n      return alert('you need to login');\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n      }\n    })\n  }, [ me && me.id ])\n\n  const onToggleComment = useCallback((e) => {\n    setCommentFormOpened(prev => !prev);\n\n  }, [])\n\n  const onChangeCommentText = useCallback((e) => {\n    setCommentText(e.target.value);\n  }, [])\n\n    return(\n      <div>\n        <Card\n        key={+post.createdAt}\n        cover={post.img && <img src={post.img} alt='example' />}\n        actions={[\n          <TwitterOutlined key='retweet'/>,\n          <HeartOutlined key='heart' />,\n          <EditOutlined key=\"edit\" onClick={onToggleComment} />,\n          <EllipsisOutlined key=\"ellipsis\" />,\n        ]}\n        extra={<Button>Follow</Button>}\n        >\n          <Card.Meta \n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={(<div>{post.content.split(/(#[^\\s]+)/).map((v) => {\n            if(v.match(/#[^\\s]+/)){\n              return (\n                <Link href={`/hashtag/${v.slice(1)}`} key={v} ><a>{v}</a></Link>\n              )\n            }\n            return v;\n          })}</div>)}\n          />         \n        </Card>\n        { commentFormOpened && \n          <>\n            <form onSubmit={onSubmitComment} >\n              <Form.Item>\n                <Input.TextArea row={4} value={commentText} onChange={onChangeCommentText} />\n              </Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment} >jack</Button>\n            </form>\n            <List \n              header={`comments: ${post.comments? post.comments.length: 0}`}\n              itemLayout=\"horizontal\"\n              dataSource={post.comments || []}\n              renderItem={item => (\n                <li>\n                  <Comment \n                  author={item.user.nickname}\n                  avatar={<Avatar>{item.user.nickname[0]}</Avatar>}\n                  content={item.content}\n                  />\n                </li>\n              )}\n            \n            />\n          </>\n        }\n      </div>\n    )\n};\n\nPostCard.propTypes = {\n    card: PropTypes.shape({\n        User: PropTypes.object,\n        img: PropTypes.string,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}