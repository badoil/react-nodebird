{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    isAddingComment,\n    commentAdded\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  console.log('liked:', liked);\n  console.log('v.id:', post.Likers);\n  console.log('me.id:', me);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('you need to login');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, [commentFormOpened]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  const onLikeOrUnlike = useCallback(() => {\n    if (!me) {\n      alert('No Authentication');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLikeOrUnlike\n    }), __jsx(EditOutlined, {\n      key: \"edit\",\n      onClick: onToggleComment\n    }), __jsx(EllipsisOutlined, {\n      key: \"ellipsis\"\n    })],\n    title: post.Retweet && me && me.userId ? `${me.userId} retweet ${post.Retweet.User.nickname}'s post` : null,\n    extra: __jsx(Button, null, \"Follow\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images && post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: post.Retweet && post.Retweet.User && post.Retweet.User.id && __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(\"form\", {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    row: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"jack\")), __jsx(List, {\n    header: `comments: ${post.comments ? post.comments.length : 0}`,\n    itemLayout: \"horizontal\",\n    dataSource: post.comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        as: `/user/${item.User.id}`,\n        href: {\n          pathname: `/user`,\n          query: {\n            id: item.User.id\n          }\n        }\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nPostCard.propTypes = {\n  card: PropTypes.shape({\n    User: PropTypes.object,\n    img: PropTypes.string,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/components/postCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Form","List","Input","Comment","PropTypes","useDispatch","useSelector","Link","EllipsisOutlined","EditOutlined","HeartOutlined","TwitterOutlined","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","PostImages","PostCardContent","PostCard","post","dispatch","me","state","user","isAddingComment","commentAdded","commentFormOpened","setCommentFormOpened","commentText","setCommentText","liked","Likers","find","v","id","console","log","onSubmitComment","e","preventDefault","alert","type","data","postId","content","onToggleComment","prev","onChangeCommentText","target","value","onLikeOrUnlike","onRetweet","createdAt","Images","Retweet","userId","User","nickname","RetweetId","pathname","query","comments","length","item","propTypes","card","shape","object","img","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Form, List, Input, Comment,  } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\n\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\n\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\n\n\nconst PostCard = ({ post } ) => {\n  const dispatch = useDispatch()\n  const { me } = useSelector(state => state.user);\n  const { isAddingComment, commentAdded } = useSelector(state => state.post);\n  const [ commentFormOpened, setCommentFormOpened ] = useState(false);\n  const [ commentText, setCommentText ] = useState('');\n  \n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id)\n  console.log('liked:', liked);\n  console.log('v.id:', post.Likers)\n  console.log('me.id:', me);\n  useEffect(() => {\n    setCommentText('');\n  }, [ commentAdded === true]);\n\n  const onSubmitComment = useCallback((e) => {\n    e.preventDefault();\n    if(!me){\n      return alert('you need to login');\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText,\n      }\n    })\n  }, [ me && me.id, commentText ])\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n    if(!commentFormOpened){\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      })\n    }\n\n  }, [commentFormOpened])\n\n  const onChangeCommentText = useCallback((e) => {\n    setCommentText(e.target.value);\n  }, [])\n\n  const onLikeOrUnlike = useCallback(() => {\n    if(!me){\n      alert('No Authentication');\n    }\n    if(liked){\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id,\n      })\n    }else{\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id,\n      })\n    }\n  },[me && me.id, post && post.id, liked])\n\n  const onRetweet = useCallback(() => {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    })\n  }, [me && me.id, post && post.id])\n\n    return(\n      <div>\n        <Card\n        key={+post.createdAt}\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <TwitterOutlined key='retweet' onClick={onRetweet} />,\n          <HeartOutlined key='heart' onClick={onLikeOrUnlike} />,\n          <EditOutlined key=\"edit\" onClick={onToggleComment} />,\n          <EllipsisOutlined key=\"ellipsis\" />,\n        ]}\n        title={post.Retweet && me && me.userId? `${me.userId} retweet ${post.Retweet.User.nickname}'s post`: null}\n        extra={<Button>Follow</Button>}\n        >\n          {\n            post.RetweetId && post.Retweet?\n            (<Card\n              cover={post.Retweet.Images && post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\n            >\n              <Card.Meta \n                avatar={post.Retweet && post.Retweet.User && post.Retweet.User.id && <Link href={{ pathname: `/user`, query: {id: post.Retweet.User.id}}} as={`/user/${post.Retweet.User.id}`} >\n                         <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n                      </Link>}\n                title={post.Retweet.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />}\n              />\n            </Card>\n            ):(\n          <Card.Meta \n          avatar={<Link href={{ pathname: `/user`, query: {id: post.User.id}}} as={`/user/${post.User.id}`} >\n                   <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n          />) \n          }        \n        </Card>\n        \n        { commentFormOpened && \n          <>\n            <form onSubmit={onSubmitComment} >\n              <Form.Item>\n                <Input.TextArea row={4} value={commentText} onChange={onChangeCommentText} />\n              </Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment} >jack</Button>\n            </form>\n            <List \n              header={`comments: ${post.comments? post.comments.length: 0}`}\n              itemLayout=\"horizontal\"\n              dataSource={post.comments || []}\n              renderItem={item => (\n                <li>\n                  <Comment \n                  author={item.User.nickname}\n                  avatar={<Link as={`/user/${item.User.id}`} href={{ pathname: `/user`, query: {id: item.User.id}}} >\n                           <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                          </Link>}\n                  content={item.content}\n                  />\n                </li>\n              )}\n            \n            />\n          </>\n        }\n      </div>\n    )\n};\n\nPostCard.propTypes = {\n    card: PropTypes.shape({\n        User: PropTypes.object,\n        img: PropTypes.string,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}