{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useCallback, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostForm from '../components/postForm';\nimport PostCard from '../components/postCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n  const {\n    me,\n    isLoggedIn\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts\n  } = useSelector(state => state.post);\n  const onScroll = useCallback(() => {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePosts) {\n        const lastId = mainPosts[mainPosts.length - 1].id;\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n  }, [mainPosts && mainPosts.length, hasMorePosts]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me ? __jsx(\"div\", null, \"login: \", me.nickname) : __jsx(\"div\", null, \"logout\"), isLoggedIn && __jsx(PostForm, null), mainPosts.map(c => {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }));\n};\n\nHome.getInitialProps = async context => {\n  console.log('context:', context);\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/pages/index.js"],"names":["React","useEffect","useCallback","useRef","useDispatch","useSelector","PostForm","PostCard","LOAD_MAIN_POSTS_REQUEST","Home","dispatch","countRef","me","isLoggedIn","state","user","mainPosts","hasMorePosts","post","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","push","addEventListener","removeEventListener","nickname","map","c","getInitialProps","context","console","log","store"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;;AAGA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,QAAQ,GAAGR,MAAM,CAAC,EAAD,CAAvB;AACA,QAAM;AAAES,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAqBR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAtC;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8BZ,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACI,IAAhB,CAA/C;AAEA,QAAMC,QAAQ,GAAGjB,WAAW,CAAC,MAAM;AAC/B,QAAGkB,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAApG,EAAwG;AACpG,UAAGR,YAAH,EAAgB;AACZ,cAAMS,MAAM,GAAGV,SAAS,CAACA,SAAS,CAACW,MAAV,GAAiB,CAAlB,CAAT,CAA8BC,EAA7C;;AACA,YAAG,CAACjB,QAAQ,CAACkB,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAJ,EAAsC;AAClChB,UAAAA,QAAQ,CAAC;AACLqB,YAAAA,IAAI,EAAEvB,uBADD;AAELkB,YAAAA;AAFK,WAAD,CAAR;AAIAf,UAAAA,QAAQ,CAACkB,OAAT,CAAiBG,IAAjB,CAAsBN,MAAtB;AACH;AACJ;AACJ;AACJ,GAb2B,EAazB,CAACV,SAAS,IAAIA,SAAS,CAACW,MAAxB,EAAgCV,YAAhC,CAbyB,CAA5B;AAeAhB,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCd,QAAlC;AACA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCf,QAArC;AACH,KAFD;AAGH,GALQ,EAKN,CAACH,SAAS,CAACW,MAAX,CALM,CAAT;AAOA,SACI,mBACKf,EAAE,GAAG,8BAAaA,EAAE,CAACuB,QAAhB,CAAH,GAAoC,4BAD3C,EAEMtB,UAAU,IAAI,MAAC,QAAD,OAFpB,EAGQG,SAAS,CAACoB,GAAV,CAAeC,CAAD,IAAO;AACnB,WACI,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACT,EAAjB;AAAqB,MAAA,IAAI,EAAES;AAA3B,MADJ;AAGH,GAJC,CAHR,CADJ;AAYH,CAxCD;;AA0CA5B,IAAI,CAAC6B,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,OAAxB;AACAA,EAAAA,OAAO,CAACG,KAAR,CAAchC,QAAd,CAAuB;AACnBqB,IAAAA,IAAI,EAAEvB;AADa,GAAvB;AAGH,CALD;;AAOA,eAAeC,IAAf","sourcesContent":["import React, { useEffect, useCallback, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PostForm from '../components/postForm';\nimport PostCard from '../components/postCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const countRef = useRef([]);\n    const { me, isLoggedIn } = useSelector(state => state.user);\n    const { mainPosts, hasMorePosts } = useSelector(state => state.post);\n\n    const onScroll = useCallback(() => {\n        if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300){\n            if(hasMorePosts){\n                const lastId = mainPosts[mainPosts.length-1].id\n                if(!countRef.current.includes(lastId)){\n                    dispatch({\n                        type: LOAD_MAIN_POSTS_REQUEST,\n                        lastId,\n                    })\n                    countRef.current.push(lastId);\n                }\n            }              \n        }\n    }, [mainPosts && mainPosts.length, hasMorePosts])\n\n    useEffect(() => {\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            window.removeEventListener('scroll', onScroll)\n        };\n    }, [mainPosts.length])\n\n    return (\n        <div>\n            {me ? <div>login: {me.nickname}</div>: <div>logout</div>}\n            { isLoggedIn && <PostForm />}\n              { mainPosts.map((c) => {\n                  return(\n                      <PostCard key={c.id} post={c} />\n                  )\n              })\n              }\n        </div>\n    )\n}\n\nHome.getInitialProps = async (context) => {\n    console.log('context:', context);\n    context.store.dispatch({\n        type: LOAD_MAIN_POSTS_REQUEST,\n    })\n}\n\nexport default Home; "]},"metadata":{},"sourceType":"module"}