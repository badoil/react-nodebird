{"ast":null,"code":"import { all, put, call, takeLatest, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\n\nfunction loginAPI(loginData) {\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction signupAPI(signUpData) {\n  return axios.post('/user', signUpData);\n}\n\nfunction* signup(action) {\n  try {\n    yield call(signupAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nfunction logoutAPI() {\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction loadUserAPI(userId) {\n  return axios.get(userId ? `/user/${userId}` : `/user`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    console.log(result);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/user.js"],"names":["all","put","call","takeLatest","fork","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","loginAPI","loginData","post","withCredentials","login","action","result","data","type","err","console","error","watchLogin","signupAPI","signUpData","signup","watchSignup","logoutAPI","logout","watchLogout","loadUserAPI","userId","get","loadUser","log","me","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import { all, put, call, takeLatest, fork } from 'redux-saga/effects';\nimport axios from 'axios'\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n        SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, \n        LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n        LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\n\n\nfunction loginAPI(loginData) {\n    return axios.post('/user/login', loginData, {\n        withCredentials: true,\n    });\n}\n\nfunction* login(action){\n    try{\n        const result = yield call(loginAPI, action.data);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: LOG_IN_FAILURE,\n        })\n    }\n}\n\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN_REQUEST, login)\n    \n}\n\nfunction signupAPI(signUpData){\n    return axios.post('/user', signUpData);\n}\n\nfunction* signup(action){\n    try{\n        yield call(signupAPI, action.data);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: err,\n        })\n    }\n   \n}\n\nfunction* watchSignup(){\n    yield takeLatest(SIGN_UP_REQUEST, signup)\n}\n\nfunction logoutAPI() {\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    })\n}\n\nfunction* logout(){\n    try{\n        yield call(logoutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOG_OUT_REQUEST, logout)\n}\n\nfunction loadUserAPI(userId){\n    return axios.get(userId? `/user/${userId}`: `/user`, {\n        withCredentials: true,\n    })\n}\n\nfunction* loadUser(action){\n    try{\n        const result = yield call(loadUserAPI, action.data);\n        console.log(result);\n        yield put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n            me: !action.data,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLoadUser(){\n    yield takeLatest(LOAD_USER_REQUEST, loadUser)\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchSignup),\n        fork(watchLoadUser),\n    ])\n}"]},"metadata":{},"sourceType":"module"}