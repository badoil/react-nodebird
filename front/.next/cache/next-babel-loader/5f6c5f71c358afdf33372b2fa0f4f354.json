{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginAPI),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(signupAPI),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(signup),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignup),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, put, call, takeLatest, fork, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(3000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction signupAPI() {\n  return _regeneratorRuntime.wrap(function signupAPI$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction signup() {\n  return _regeneratorRuntime.wrap(function signup$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(3000);\n\n        case 3:\n          throw new Error('error, error');\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signup);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchSignup)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/user.js"],"names":["loginAPI","login","watchLogin","signupAPI","signup","watchSignup","userSaga","all","put","call","takeLatest","fork","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","type","console","error","Error"],"mappings":";;oDAIUA,Q;qDAIAC,K;qDAeAC,U;qDAKAC,S;qDAIAC,M;qDAkBAC,W;qDAIeC,Q;;AAtDzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCC,IAArC,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH;;AAGA,SAAUlB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMW,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMJ,GAAG,CAAC;AACNW,YAAAA,IAAI,EAAEL;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQM,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMb,GAAG,CAAC;AACNW,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAACG,cAAD,EAAiBZ,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMQ,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA,gBAIc,IAAIU,KAAJ,CAAU,cAAV,CAJd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQF,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAMb,GAAG,CAAC;AACNW,YAAAA,IAAI,EAAED,eADA;AAENG,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUhB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACM,eAAD,EAAkBZ,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNI,IAAI,CAACT,UAAD,CADE,EAENS,IAAI,CAACN,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, call, takeLatest, fork, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\n\nfunction* loginAPI() {\n    //requesting server part\n}\n\nfunction* login(){\n    try{\n        //yield call(loginAPI);\n        yield delay(3000)\n        yield put({\n            type: LOG_IN_SUCCESS\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: LOG_IN_FAILURE,\n        })\n    }\n}\n\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN_REQUEST, login)\n    \n}\n\nfunction* signupAPI(){\n    \n}\n\nfunction* signup(){\n    try{\n        //yield call(signupAPI);\n        yield delay(3000);\n        throw new Error('error, error')\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: err,\n        })\n    }\n   \n}\n\nfunction* watchSignup(){\n    yield takeLatest(SIGN_UP_REQUEST, signup)\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchSignup),\n    ])\n}"]},"metadata":{},"sourceType":"module"}