{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadComments),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadComments),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log('addPostResult: ', result);\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadCommentsAPI(data) {\n  return axios.get(\"/post/\".concat(data, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return put(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              comments: result.data,\n              postId: action.data\n            }\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadMainPostAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadMainPost() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadMainPostAPI);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPost() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadMainPost), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadComments","watchLoadComments","loadMainPost","watchLoadMainPost","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","postSaga","all","fork","call","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","addPostAPI","postData","post","withCredentials","action","data","result","console","log","type","error","addCommentAPI","postId","content","comment","loadCommentsAPI","get","comments","loadMainPostAPI","loadHashtagPostsAPI","tag","loadUserPostsAPI","id"],"mappings":"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","sourcesContent":["import { all, fork, call, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, \n        LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n        LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, \n        LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData){\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    })\n}\n\nfunction* addPost(action){\n    try{\n        const result = yield call(addPostAPI, action.data);\n        console.log('addPostResult: ', result)\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction addCommentAPI(data){\n    return axios.post(`/${data.postId}/comment`, { content: data.content }, {\n        withCredentials: true,\n    })\n}\n\nfunction* addComment(action){\n    try{\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            }\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error,\n        })\n    }\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(data){\n    return axios.get(`/post/${data}/comments`);\n}\n\nfunction* loadComments(action){\n    try{\n        const result = yield put(loadCommentsAPI, action.data);\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                comments: result.data,\n                postId: action.data,\n            }\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadComments(){\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\n}\n\nfunction loadMainPostAPI(){\n    return axios.get('/posts');\n}\n\nfunction* loadMainPost(){\n    try{\n        const result = yield call(loadMainPostAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLoadMainPost(){\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPost);\n}\n\nfunction loadHashtagPostsAPI(tag){\n    return axios.get(`/hashtag/${tag}`)\n}\n\nfunction* loadHashtagPosts(action){\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e),\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts(){\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\n}\n\nfunction loadUserPostsAPI(id){\n    return axios.get(`user/${id}/posts`)\n}\n\nfunction* loadUserPosts(action){\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts(){\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadComments),\n        fork(watchLoadMainPost),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n    ])\n}"]},"metadata":{},"sourceType":"module"}