{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport createSagamiddleware from 'redux-saga';\nimport rootReducer from '../reducers';\nimport AppLayout from '../components/appLayout';\nimport rootSaga from '../sagas';\n\nconst Nodebird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Nodebird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps))));\n};\n\nNodebird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n};\n\nNodebird.getInitialProps = async context => {\n  console.log('context: ', context);\n  const {\n    ctx,\n    Component\n  } = context;\n  const pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagamiddleware = createSagamiddleware();\n  const middlewares = [sagamiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(rootReducer, initialState, enhancer);\n  sagamiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(Nodebird);","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/pages/_app.js"],"names":["React","Head","PropTypes","createStore","compose","applyMiddleware","Provider","withRedux","createSagamiddleware","rootReducer","AppLayout","rootSaga","Nodebird","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","configureStore","initialState","options","sagamiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA;AAApB,CAAD,KAAqC;AAClD,SACI,4BACI,MAAC,QAAD;AAAU,IAAA,KAAK,EAAED;AAAjB,KACI,MAAC,IAAD,QACI,gCADJ,EAEI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC;AAA5B,IAFJ,CADJ,EAKI,MAAC,SAAD,QACI,MAAC,SAAD,EAAeC,SAAf,CADJ,CALJ,CADJ,CADJ;AAaH,CAdD;;AAgBAH,QAAQ,CAACI,SAAT,GAAqB;AACjBH,EAAAA,SAAS,EAAEX,SAAS,CAACe,WAAV,CAAsBC,UADhB;AAEjBJ,EAAAA,KAAK,EAAEZ,SAAS,CAACiB,MAAV,CAAiBD,UAFP;AAGjBH,EAAAA,SAAS,EAAEb,SAAS,CAACiB,MAAV,CAAiBD;AAHX,CAArB;;AAMAN,QAAQ,CAACQ,eAAT,GAA2B,MAAOC,OAAP,IAAmB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,OAAzB;AACA,QAAM;AAAEG,IAAAA,GAAF;AAAOX,IAAAA;AAAP,MAAsBQ,OAA5B;AACA,QAAMN,SAAS,GAAG,EAAlB;;AACA,MAAGF,SAAS,CAACO,eAAb,EAA6B;AAC1BL,IAAAA,SAAS,GAAI,MAAMF,SAAS,CAACO,eAAV,CAA0BI,GAA1B,CAAnB;AACF;;AACD,SAAO;AAACT,IAAAA;AAAD,GAAP;AACH,CARD;;AAUA,MAAMU,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC9C,QAAMC,cAAc,GAAGpB,oBAAoB,EAA3C;AACA,QAAMqB,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACf1B,OAAO,CAACC,eAAe,CAAC,GAAGwB,WAAJ,CAAhB,CADQ,GAEfzB,OAAO,CAACC,eAAe,CAAC,GAAGwB,WAAJ,CAAhB,EACT,CAACF,OAAO,CAACI,QAAT,IAAqB,OAAOC,MAAM,CAACC,4BAAd,KAA+C,WAApE,GAAkFD,MAAM,CAACC,4BAAP,EAAlF,GAA2HC,CAAD,IAAOA,CADxH,CAFT;AAKA,QAAMpB,KAAK,GAAGX,WAAW,CAACM,WAAD,EAAciB,YAAd,EAA4BI,QAA5B,CAAzB;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBxB,QAAnB;AACA,SAAOG,KAAP;AACH,CAXD;;AAaA,eAAgBP,SAAS,CAACkB,cAAD,CAAT,CAA0Bb,QAA1B,CAAhB","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux'\nimport withRedux from 'next-redux-wrapper';\nimport createSagamiddleware from 'redux-saga';\n\nimport rootReducer from '../reducers';\nimport AppLayout from '../components/appLayout';\nimport rootSaga from '../sagas';\n\n\nconst Nodebird = ({ Component, store, pageProps }) => {\n    return(\n        <>\n            <Provider store={store} >\n                <Head>\n                    <title>Nodebird</title>\n                    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\n                </ Head>\n                <AppLayout>\n                    <Component {...pageProps} />\n                </AppLayout>\n            </Provider>\n        </>\n    )\n}\n\nNodebird.propTypes = {\n    Component: PropTypes.elementType.isRequired,\n    store: PropTypes.object.isRequired,\n    pageProps: PropTypes.object.isRequired,\n}\n\nNodebird.getInitialProps = async (context) => {\n    console.log('context: ', context);\n    const { ctx, Component }  = context;\n    const pageProps = {};\n    if(Component.getInitialProps){\n       pageProps =  await Component.getInitialProps(ctx);\n    }\n    return {pageProps};\n}\n\nconst configureStore = (initialState, options) => {\n    const sagamiddleware = createSagamiddleware();\n    const middlewares = [sagamiddleware];\n    const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : compose(applyMiddleware(...middlewares), \n    !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,)\n\n    const store = createStore(rootReducer, initialState, enhancer);\n    sagamiddleware.run(rootSaga)\n    return store;\n};\n\nexport default  withRedux(configureStore)(Nodebird);"]},"metadata":{},"sourceType":"module"}