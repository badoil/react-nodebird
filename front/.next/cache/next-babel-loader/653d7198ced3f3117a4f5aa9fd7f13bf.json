{"ast":null,"code":"import { all, put, call, takeLatest, fork, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:3306/api/user';\n\nfunction loginAPI(loginData) {\n  return axios.post('/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    console.log('result: ', result);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction signupAPI(signUpData) {\n  return axios.post('/', signUpData);\n}\n\nfunction* signup(action) {\n  try {\n    yield call(signupAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nfunction logoutAPI() {\n  return axios.post('/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/user.js"],"names":["all","put","call","takeLatest","fork","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","defaults","baseURL","loginAPI","loginData","post","withCredentials","login","action","result","data","console","log","type","err","error","watchLogin","signupAPI","signUpData","signup","watchSignup","logoutAPI","logout","watchLogout","userSaga"],"mappings":"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","sourcesContent":["import { all, put, call, takeLatest, fork, delay } from 'redux-saga/effects';\nimport axios from 'axios'\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducers/user';\n\naxios.defaults.baseURL = 'http://localhost:3306/api/user';\n\nfunction loginAPI(loginData) {\n    return axios.post('/login', loginData, {\n        withCredentials: true,\n    });\n}\n\nfunction* login(action){\n    try{\n        const result = yield call(loginAPI, action.data);\n        console.log('result: ', result);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: LOG_IN_FAILURE,\n        })\n    }\n}\n\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN_REQUEST, login)\n    \n}\n\nfunction signupAPI(signUpData){\n    return axios.post('/', signUpData);\n}\n\nfunction* signup(action){\n    try{\n        yield call(signupAPI, action.data);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: err,\n        })\n    }\n   \n}\n\nfunction* watchSignup(){\n    yield takeLatest(SIGN_UP_REQUEST, signup)\n}\n\nfunction logoutAPI() {\n    return axios.post('/logout', {}, {\n        withCredentials: true,\n    })\n}\n\nfunction* logout(){\n    try{\n        yield call(logoutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOG_OUT_REQUEST, logout)\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchSignup),\n    ])\n}"]},"metadata":{},"sourceType":"module"}