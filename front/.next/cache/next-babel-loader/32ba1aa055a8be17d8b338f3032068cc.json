{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, memo } from 'react';\nimport { Card, Button, Avatar, List, Comment, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\nimport { LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\nimport CommentForm from './commentForm';\nimport FollowButton from './followButton';\nconst PostCard = memo(({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const id = useSelector(state => state.user.me && state.user.me.id);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const liked = me && post.Likers && post.Likers.find(v => v.id === id);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, [commentFormOpened]);\n  const onLikeOrUnlike = useCallback(() => {\n    if (id) {\n      alert('No Authentication');\n    }\n\n    if (liked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id, post && post.id]);\n  const onUnfollow = useCallback(postUserId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: postUserId\n    });\n  }, []);\n  const onFollow = useCallback(postUserId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: postUserId\n    });\n  }, []);\n  const onRemovePost = useCallback(postId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: postId\n    });\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(TwitterOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLikeOrUnlike\n    }), __jsx(EditOutlined, {\n      key: \"edit\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, id && post.UserId ? __jsx(React.Fragment, null, __jsx(Button, null, \"update\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"remove\")) : __jsx(Button, null, \"send a complaint\"))\n    }, __jsx(EllipsisOutlined, {\n      key: \"ellipsis\"\n    }))],\n    title: post.Retweet && post.Retweet.User && post.Retweet.User.nickname && post.User.nickname ? `${post.User.nickname} retweet ${post.Retweet.User.nickname}'s post` : null,\n    extra: __jsx(FollowButton, {\n      post: post,\n      onFollow: onFollow,\n      onUnfollow: onUnfollow\n    })\n  }, post.RetweetId && post.Retweet && post.Retweet.User && post.Retweet.User.id ? __jsx(Card, {\n    cover: post.Retweet.Images && post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: `comments: ${post.comments ? post.comments.length : 0}`,\n    itemLayout: \"horizontal\",\n    dataSource: post.comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        as: `/user/${item.User.id}`,\n        href: {\n          pathname: `/user`,\n          query: {\n            id: item.User.id\n          }\n        }\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n});\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    img: PropTypes.string,\n    content: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/components/postCard.js"],"names":["React","useState","useCallback","memo","Card","Button","Avatar","List","Comment","Popover","PropTypes","useDispatch","useSelector","Link","EllipsisOutlined","EditOutlined","HeartOutlined","TwitterOutlined","LOAD_COMMENTS_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","UNFOLLOW_USER_REQUEST","FOLLOW_USER_REQUEST","PostImages","PostCardContent","CommentForm","FollowButton","PostCard","post","dispatch","id","state","user","me","commentFormOpened","setCommentFormOpened","liked","Likers","find","v","onToggleComment","prev","type","data","onLikeOrUnlike","alert","onRetweet","onUnfollow","postUserId","onFollow","onRemovePost","postId","createdAt","Images","UserId","Retweet","User","nickname","RetweetId","pathname","query","content","comments","length","item","propTypes","shape","object","img","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, memo } from 'react';\nimport { Card, Button, Avatar, List, Comment, Popover  } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\n\nimport { EllipsisOutlined, EditOutlined, HeartOutlined, TwitterOutlined } from '@ant-design/icons';\n\nimport { LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, \n        UNLIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport PostImages from './postImages';\nimport PostCardContent from './postCardContent';\nimport CommentForm from './commentForm';\nimport FollowButton from './followButton';\n\n\nconst PostCard = memo(({ post } ) => {\n  const dispatch = useDispatch()\n  const id = useSelector(state => state.user.me && state.user.me.id);\n  const [ commentFormOpened, setCommentFormOpened ] = useState(false);\n  \n  const liked = me && post.Likers && post.Likers.find(v => v.id === id)\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n    if(!commentFormOpened){\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      })\n    }\n\n  }, [commentFormOpened])\n\n  const onLikeOrUnlike = useCallback(() => {\n    if(id){\n      alert('No Authentication');\n    }\n    if(liked){\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id,\n      })\n    }else{\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id,\n      })\n    }\n  },[id, post && post.id, liked])\n\n  const onRetweet = useCallback(() => {\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    })\n  }, [id, post && post.id])\n\n  const onUnfollow = useCallback(postUserId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: postUserId,\n    })\n  }, [])\n\n  const onFollow = useCallback(postUserId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: postUserId,\n    })\n  }, [])\n\n  const onRemovePost = useCallback(postId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST, \n      data: postId,\n    })\n  }, []);\n\n    return(\n      <div>\n        <Card\n        key={+post.createdAt}\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <TwitterOutlined key='retweet' onClick={onRetweet} />,\n          <HeartOutlined key='heart' onClick={onLikeOrUnlike} />,\n          <EditOutlined key=\"edit\" onClick={onToggleComment} />,\n          <Popover\n            key='ellipsis'\n            content={( \n              <Button.Group>\n              {id && post.UserId\n              ?(<>\n                <Button>update</Button>\n                <Button type='danger' onClick={onRemovePost(post.id)}>remove</Button>\n              </>)\n              :<Button>send a complaint</Button>}\n              </Button.Group>\n            )}\n          >\n             <EllipsisOutlined key=\"ellipsis\" />\n          </Popover>\n         ,\n        ]}\n        title={post.Retweet && post.Retweet.User && post.Retweet.User.nickname && post.User.nickname ? `${post.User.nickname} retweet ${post.Retweet.User.nickname}'s post`: null}\n        extra={<FollowButton post={post} onFollow={onFollow} onUnfollow={onUnfollow} />}\n        >\n          {\n            post.RetweetId && post.Retweet && post.Retweet.User && post.Retweet.User.id?\n            (<Card\n              cover={post.Retweet.Images && post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\n            >\n              <Card.Meta \n                avatar={<Link href={{ pathname: `/user`, query: {id: post.Retweet.User.id}}} as={`/user/${post.Retweet.User.id}`} >\n                         <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n                      </Link>}\n                title={post.Retweet.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />}\n              />\n            </Card>\n            ):(\n          <Card.Meta \n          avatar={<Link href={{ pathname: `/user`, query: {id: post.User.id}}} as={`/user/${post.User.id}`} >\n                   <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n          />) \n          }        \n        </Card>\n        \n        { commentFormOpened && \n          <>\n            <CommentForm post={post} />\n            <List \n              header={`comments: ${post.comments? post.comments.length: 0}`}\n              itemLayout=\"horizontal\"\n              dataSource={post.comments || []}\n              renderItem={item => (\n                <li>\n                  <Comment \n                  author={item.User.nickname}\n                  avatar={<Link as={`/user/${item.User.id}`} href={{ pathname: `/user`, query: {id: item.User.id}}} >\n                           <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                          </Link>}\n                  content={item.content}\n                  />\n                </li>\n              )}\n            \n            />\n          </>\n        }\n      </div>\n    )\n});\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        img: PropTypes.string,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}