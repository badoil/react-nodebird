{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginAPI),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, put, call, takeLatest, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take(LOG_IN);\n\n        case 2:\n          _context3.next = 4;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([call(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/user.js"],"names":["loginAPI","login","watchLogin","userSaga","all","put","call","takeLatest","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","type","console","error"],"mappings":";;oDAIUA,Q;qDAIAC,K;qDAcAC,U;qDAOeC,Q;;AA7BzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;;AAGA,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMK,IAAI,CAACN,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMK,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEF;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQG,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMT,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAED;AADA,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUT,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,IAAI,CAACC,MAAD,CAAV;;AADJ;AAAA;AAEI,iBAAMJ,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEF;AADA,WAAD,CAAT;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAe,SAAUP,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACJ,UAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, call, takeLatest, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\n\nfunction* loginAPI() {\n    \n}\n\nfunction* login(){\n    try{\n        yield call(loginAPI);\n        yield put({\n            type: LOG_IN_SUCCESS\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: LOG_IN_FAILURE,\n        })\n    }\n}\n\nfunction* watchLogin(){\n    yield take(LOG_IN)\n    yield put({\n        type: LOG_IN_SUCCESS\n    })\n}\n\nexport default function* userSaga() {\n    yield all([\n        call(watchLogin)\n    ])\n}"]},"metadata":{},"sourceType":"module"}