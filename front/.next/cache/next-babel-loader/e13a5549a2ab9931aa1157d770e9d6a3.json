{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var imageInput = useRef();\n  useEffect(function () {\n    if (postAdded) {\n      setText('');\n    }\n  }, [postAdded]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('no text');\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text.trim()\n      }\n    });\n  }, [text]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onChangeImages = useCallback(function (e) {\n    console.log('targetFile:', e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        index: index\n      });\n    };\n  }, []);\n  return __jsx(\"form\", {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"write something\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onImageUpload\n  }, \"image upload\"), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: {\n      \"float\": 'right'\n    },\n    loading: isAddingPost\n  }, \"submit\")), __jsx(\"div\", null, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3306/\".concat(v),\n      style: {\n        width: '200px'\n      },\n      alt: v\n    }), __jsx(\"div\", null, __jsx(Button, {\n      onClick: onRemoveImage(i)\n    }, \"remove\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/components/postForm.js"],"names":["React","useState","useCallback","useEffect","useRef","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","state","post","imagePaths","isAddingPost","postAdded","dispatch","text","setText","imageInput","onSubmitForm","e","preventDefault","trim","alert","type","data","content","onChangeText","target","value","onChangeImages","console","log","files","imageFormData","FormData","forEach","call","f","append","onImageUpload","current","click","onRemoveImage","index","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nconst PostForm = () => {\n    const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\n    const dispatch = useDispatch();\n    const [ text, setText ] = useState('');\n    const imageInput = useRef();\n\n\n    useEffect(() => {\n        if (postAdded) {\n            setText('');\n          }\n    }, [ postAdded ])\n\n    const onSubmitForm = useCallback((e) => {\n        e.preventDefault();\n        if( !text || !text.trim()){\n            return alert('no text');\n        }\n        dispatch({\n            type: ADD_POST_REQUEST,\n            data: {\n                content: text.trim(),\n            },\n        })\n    }, [text]);\n\n    const onChangeText = useCallback((e) => {\n        setText(e.target.value);\n    }, []);\n\n    const onChangeImages = useCallback((e) => {\n        console.log('targetFile:', e.target.files);\n        const imageFormData = new FormData();\n        [].forEach.call(e.target.files, (f)=> {\n            imageFormData.append('image', f)\n        })\n        dispatch({\n            type: UPLOAD_IMAGES_REQUEST,\n            data: imageFormData,\n        })\n    }, [])\n\n    const onImageUpload = useCallback(() => {\n        imageInput.current.click();\n    }, [imageInput.current])\n\n    const onRemoveImage = useCallback((index) => () => {\n        dispatch({\n            type: REMOVE_IMAGE,\n            index,\n        })\n    }, [])\n\n\n    return (\n        <form style={{ margin: '10px 0 20px'}} encType=\"multipart/form-data\" onSubmit={onSubmitForm} >\n                <Input.TextArea maxLength={140} placeholder='write something' value={text} onChange={onChangeText} />\n                <div>\n                    <input type='file' multiple hidden ref={imageInput} onChange={onChangeImages} />\n                    <Button onClick={onImageUpload} >image upload</Button>\n                    <Button type='primary' htmlType='submit' style={{float: 'right'}} loading={isAddingPost} >submit</Button>\n                </div>\n                <div>\n                    { imagePaths.map((v, i) => {\n                        return(\n                            <div key={v} style={{ display: 'inline-block' }} >\n                                <img  src={`http://localhost:3306/${v}`} style={{ width: '200px'}} alt={v} />\n                                <div>\n                                    <Button onClick={onRemoveImage(i)} >remove</Button>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n              </form>\n    )\n};\n\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}