{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadComments),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadComments),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(loadSinglePost),\n    _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadSinglePost),\n    _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, takeLatest, put, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(formData) {\n  return axios.post('/post', formData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('addPostAction: ', action.data);\n          _context.next = 4;\n          return call(addPostAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          console.log('addPostResult: ', result.data);\n          _context.next = 8;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context.next = 10;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 10:\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 17;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log('addCommentResult:', result);\n          _context3.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('addcommentError', _context3.t0);\n          _context3.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadMainPostsAPI() {\n  var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  return axios.get(\"/posts?lastId=\".concat(lastId, \"&limit=\").concat(limit));\n}\n\nfunction loadMainPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadMainPostsAPI, action.lastId);\n\n        case 3:\n          result = _context7.sent;\n          console.log('loadMainPost:', result.data);\n          _context7.next = 7;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n            lastId: !action.lastId\n          });\n\n        case 7:\n          _context7.next = 14;\n          break;\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 14;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 9]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  var lastId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(tag), \"?lastId=\").concat(lastId, \"&limit=\").concat(limit));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"user/\".concat(id || 0, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          console.log('imageResult:', result.data);\n          _context13.next = 7;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context13.next = 14;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 14;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 9]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 14;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n          alert(_context19.t0.response.data);\n\n        case 14:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction removePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId), {\n    withCredentials: true\n  });\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          console.log('removeAction:', action.data);\n          _context21.next = 4;\n          return call(removePostAPI, action.data);\n\n        case 4:\n          result = _context21.sent;\n          console.log('removePostResult: ', result.data);\n          _context21.next = 8;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context21.next = 10;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 10:\n          _context21.next = 17;\n          break;\n\n        case 12:\n          _context21.prev = 12;\n          _context21.t0 = _context21[\"catch\"](0);\n          console.error(_context21.t0);\n          _context21.next = 17;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context21.t0\n          });\n\n        case 17:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21, null, [[0, 12]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction loadSinglePostAPI(postId) {\n  return axios.get(\"/post/\".concat(postId));\n}\n\nfunction loadSinglePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadSinglePost$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.prev = 0;\n          console.lot('loadPostActionData: ', action.data);\n          _context23.next = 4;\n          return call(loadSinglePostAPI, action.data);\n\n        case 4:\n          result = _context23.sent;\n          console.log('loadPostResult:', result.data);\n          _context23.next = 8;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context23.next = 15;\n          break;\n\n        case 10:\n          _context23.prev = 10;\n          _context23.t0 = _context23[\"catch\"](0);\n          console.error(_context23.t0);\n          _context23.next = 15;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context23.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23, null, [[0, 10]]);\n}\n\nfunction watchLoadSinglePost() {\n  return _regeneratorRuntime.wrap(function watchLoadSinglePost$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadSinglePost);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadMainPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost), fork(watchLoadSinglePost)]);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadComments","watchLoadComments","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","removePost","watchRemovePost","loadSinglePost","watchLoadSinglePost","postSaga","all","fork","call","takeLatest","put","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_SUCCESS","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","formData","post","withCredentials","action","console","log","data","result","type","id","error","addCommentAPI","postId","content","comment","loadCommentsAPI","get","comments","loadMainPostsAPI","lastId","limit","loadHashtagPostsAPI","tag","encodeURIComponent","loadUserPostsAPI","uploadImagesAPI","likePostAPI","userId","unlikePostAPI","retweetAPI","alert","response","removePostAPI","loadSinglePostAPI","lot"],"mappings":"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","sourcesContent":["import { all, fork, call, takeLatest, put, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, \n        LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n        LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, \n        LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, \n        UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, \n        LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, \n        UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, \n        RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, \n        REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(formData){\n    return axios.post('/post', formData, {\n        withCredentials: true,\n    })\n}\n\nfunction* addPost(action){\n    try{\n        console.log('addPostAction: ', action.data)\n        const result = yield call(addPostAPI, action.data);\n        console.log('addPostResult: ', result.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction addCommentAPI(data){\n    return axios.post(`post/${data.postId}/comment`, { content: data.content }, {\n        withCredentials: true,\n    })\n}\n\nfunction* addComment(action){\n    try{\n        const result = yield call(addCommentAPI, action.data);\n        console.log('addCommentResult:', result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            }\n        })\n    }catch(err){\n        console.error('addcommentError', err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: action.error,\n        })\n    }\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId){\n    return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n    try {\n      const result = yield call(loadCommentsAPI, action.data);\n      yield put({\n        type: LOAD_COMMENTS_SUCCESS,\n        data: {\n          postId: action.data,\n          comments: result.data,\n        },\n      });\n    } catch (e) {\n      console.error(e);\n      yield put({\n        type: LOAD_COMMENTS_FAILURE,\n        error: e,\n      });\n    }\n  }\n\nfunction* watchLoadComments(){\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\n}\n\nfunction loadMainPostsAPI(lastId=0, limit=10){\n    return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action){\n    try{\n        const result = yield call(loadMainPostsAPI, action.lastId);\n        console.log('loadMainPost:', result.data)\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n            lastId: !action.lastId,\n        })\n    }catch(err){\n        console.error(err);\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: err,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts(){\n    yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId=0, limit=10){\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=${limit}`)\n}\n\nfunction* loadHashtagPosts(action){\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e),\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts(){\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\n}\n\nfunction loadUserPostsAPI(id){\n    return axios.get(`user/${id || 0}/posts`)\n}\n\nfunction* loadUserPosts(action){\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts(){\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction uploadImagesAPI(formData){\n    return axios.post('/post/images', formData, {\n        withCredentials: true,\n    })\n}\n\nfunction* uploadImages(action){\n    try{\n        const result = yield call(uploadImagesAPI, action.data)\n        console.log('imageResult:', result.data)\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUploadImages(){\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId){\n    return axios.post(`post/${postId}/like`, {}, {\n        withCredentials: true,\n    })\n}\n\nfunction* likePost(action){\n    try{\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data:{\n                postId: action.data,\n                userId: result.data,\n            }\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLikePost(){\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId){\n    return axios.delete(`/post/${postId}/like`, {\n        withCredentials: true,\n    })\n}\n\nfunction* unlikePost(action){\n    try{\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data,\n            }\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUnlikePost(){\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId){\n    return axios.post(`/post/${postId}/retweet`, {}, {\n        withCredentials: true,\n    })\n}\n\nfunction* retweet(action){\n    try{\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: e,\n        })\n        alert(e.response.data);\n    }\n}\n\nfunction* watchRetweet(){\n    yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId){\n    return axios.delete(`/post/${postId}`, {\n        withCredentials: true,\n    })\n}\n\nfunction* removePost(action){\n    try{\n        console.log('removeAction:', action.data);\n        const result = yield call(removePostAPI, action.data);\n        console.log('removePostResult: ', result.data);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        })\n        yield put({\n            type: REMOVE_POST_OF_ME, \n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchRemovePost(){\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction loadSinglePostAPI(postId){\n    return axios.get(`/post/${postId}`)\n}\n\nfunction* loadSinglePost(action){\n    try{\n        console.lot('loadPostActionData: ', action.data)\n        const result = yield call(loadSinglePostAPI, action.data);\n        console.log('loadPostResult:', result.data)\n        yield put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data,\n        })\n    }catch(e){\n        console.error(e);\n        yield put({\n            type: LOAD_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadSinglePost(){\n    yield takeLatest(LOAD_POST_REQUEST, loadSinglePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchLoadComments),\n        fork(watchLoadMainPosts),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchRetweet),\n        fork(watchRemovePost),\n        fork(watchLoadSinglePost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}