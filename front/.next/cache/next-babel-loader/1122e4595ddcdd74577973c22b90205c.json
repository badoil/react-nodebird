{"ast":null,"code":"import { all, put, call, takeLatest, fork, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction* loginAPI() {//requesting server part\n}\n\nfunction* login() {\n  try {\n    //yield call(loginAPI);\n    yield delay(3000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/sagas/user.js"],"names":["all","put","call","takeLatest","fork","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","login","type","err","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCC,IAArC,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,QAA+D,kBAA/D;;AAGA,UAAUC,QAAV,GAAqB,CACjB;AACH;;AAED,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC;AACA,UAAML,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH,GAND,CAMC,OAAMK,GAAN,EAAU;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMX,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAEH;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUO,UAAV,GAAsB;AAClB,QAAMZ,UAAU,CAACG,cAAD,EAAiBI,KAAjB,CAAhB;AAEH;;AAED,eAAe,UAAUM,QAAV,GAAqB;AAChC,QAAMhB,GAAG,CAAC,CACNI,IAAI,CAACW,UAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { all, put, call, takeLatest, fork, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\n\nfunction* loginAPI() {\n    //requesting server part\n}\n\nfunction* login(){\n    try{\n        //yield call(loginAPI);\n        yield delay(3000)\n        yield put({\n            type: LOG_IN_SUCCESS\n        })\n    }catch(err){\n        console.error(err)\n        yield put({\n            type: LOG_IN_FAILURE,\n        })\n    }\n}\n\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN_REQUEST, login)\n    \n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin)\n    ])\n}"]},"metadata":{},"sourceType":"module"}