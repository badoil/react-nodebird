{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/postCard';\nimport { Avatar, Card } from 'antd';\n\nconst User = () => {\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"tweet\"\n    }, \"jack, jack\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"followings\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"Followers\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(c => __jsx(PostCard, {\n    post: c,\n    key: +c.createdAt\n  })));\n};\n\nUser.propTypes = {\n  id: Proptypes.number.isRequired\n};\n\nUser.getInitialProps = async context => {\n  const id = parseInt(context.query.id, 10);\n  console.log('user getInitialProps: ', context.query.id);\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: id\n  });\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: id\n  });\n};\n\nexport default User;","map":{"version":3,"sources":["/Users/oil/Desktop/zerocho-react/nodebird/front/pages/user.js"],"names":["React","useEffect","Proptypes","useDispatch","useSelector","LOAD_USER_REQUEST","LOAD_USER_POSTS_REQUEST","PostCard","Avatar","Card","User","mainPosts","state","post","userInfo","user","Posts","Followings","Followers","nickname","map","c","createdAt","propTypes","id","number","isRequired","getInitialProps","context","parseInt","query","console","log","store","dispatch","type","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAM;AAAEC,IAAAA;AAAF,MAAgBP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAhC;AAEA,SACI,mBAEQD,QAAQ,GACR,MAAC,IAAD;AACI,IAAA,OAAO,EAAE,CACL;AAAK,MAAA,GAAG,EAAC;AAAT,qBAEI,iBAFJ,EAGKA,QAAQ,CAACE,KAHd,CADK,EAML;AAAK,MAAA,GAAG,EAAC;AAAT,qBAEI,iBAFJ,EAGKF,QAAQ,CAACG,UAHd,CANK,EAWL;AAAK,MAAA,GAAG,EAAC;AAAT,oBAEI,iBAFJ,EAGKH,QAAQ,CAACI,SAHd,CAXK;AADb,KAmBI,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EAAE,MAAC,MAAD,QAASJ,QAAQ,CAACK,QAAT,CAAkB,CAAlB,CAAT,CADZ;AAEI,IAAA,KAAK,EAAEL,QAAQ,CAACK;AAFpB,IAnBJ,CADQ,GAyBP,IA3BT,EA8BQR,SAAS,CAACS,GAAV,CAAcC,CAAC,IACP,MAAC,QAAD;AAAU,IAAA,IAAI,EAAEA,CAAhB;AAAmB,IAAA,GAAG,EAAE,CAACA,CAAC,CAACC;AAA3B,IADR,CA9BR,CADJ;AAqCH,CAzCD;;AA2CAZ,IAAI,CAACa,SAAL,GAAiB;AACbC,EAAAA,EAAE,EAAEtB,SAAS,CAACuB,MAAV,CAAiBC;AADR,CAAjB;;AAIAhB,IAAI,CAACiB,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACtC,QAAMJ,EAAE,GAAGK,QAAQ,CAACD,OAAO,CAACE,KAAR,CAAcN,EAAf,EAAmB,EAAnB,CAAnB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCJ,OAAO,CAACE,KAAR,CAAcN,EAApD;AAEAI,EAAAA,OAAO,CAACK,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAE9B,iBADa;AAEnB+B,IAAAA,IAAI,EAAEZ;AAFa,GAAvB;AAIAI,EAAAA,OAAO,CAACK,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAE7B,uBADa;AAEnB8B,IAAAA,IAAI,EAAEZ;AAFa,GAAvB;AAIH,CAZD;;AAcA,eAAed,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/postCard';\nimport { Avatar, Card } from 'antd';\n\nconst User = () => {\n    const { mainPosts } = useSelector(state => state.post);\n    const { userInfo } = useSelector(state => state.user);\n\n    return(\n        <div>\n            {\n                userInfo? \n                <Card\n                    actions={[\n                        <div key=\"tweet\">\n                            jack, jack\n                            <br />\n                            {userInfo.Posts}\n                        </div>,\n                        <div key=\"following\">\n                            followings\n                            <br />\n                            {userInfo.Followings}\n                        </div>,\n                        <div key=\"follower\">\n                            Followers\n                            <br />\n                            {userInfo.Followers}\n                        </div>,\n                    ]}\n                >\n                    <Card.Meta \n                        avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\n                        title={userInfo.nickname}\n                    />\n                </Card>\n                :null\n            }\n            {\n                mainPosts.map(c => (\n                        <PostCard post={c} key={+c.createdAt} />\n                ))\n            }\n        </div>\n    )\n}\n\nUser.propTypes = {\n    id: Proptypes.number.isRequired,\n}\n\nUser.getInitialProps = async (context) => {\n    const id = parseInt(context.query.id, 10);\n    console.log('user getInitialProps: ', context.query.id);\n\n    context.store.dispatch({\n        type: LOAD_USER_REQUEST,\n        data: id,\n    })\n    context.store.dispatch({\n        type: LOAD_USER_POSTS_REQUEST,\n        data: id,\n    })\n}\n\nexport default User;"]},"metadata":{},"sourceType":"module"}